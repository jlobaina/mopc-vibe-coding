// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums for type safety and consistency
enum UserRole {
  SUPER_ADMIN
  DEPARTMENT_ADMIN
  ANALYST
  SUPERVISOR
  OBSERVER
  TECHNICAL_MEETING_COORDINATOR
}

enum CaseStatus {
  PENDIENTE
  EN_PROGRESO
  COMPLETADO
  ARCHIVED
  SUSPENDED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CaseStage {
  RECEPCION_SOLICITUD
  VERIFICACION_REQUISITOS
  CARGA_DOCUMENTOS
  ASIGNACION_ANALISTA
  ANALISIS_PRELIMINAR
  NOTIFICACION_PROPIETARIO
  PERITAJE_TECNICO
  DETERMINACION_VALOR
  OFERTA_COMPRA
  NEGOCIACION
  APROBACION_ACUERDO
  ELABORACION_ESCRITURA
  FIRMA_DOCUMENTOS
  REGISTRO_PROPIEDAD
  DESEMBOLSO_PAGO
  ENTREGA_INMUEBLE
  CIERRE_ARCHIVO
  SUSPENDED
  CANCELLED
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  ASSIGNED
  REASSIGNED
  APPROVED
  REJECTED
  COMMENTED
  UPLOADED
  DOWNLOADED
  VIEWED
  ARCHIVED
  RESTORED
  EXPORTED
  IMPORTED
  LOGIN
  LOGOUT
  // Case specific activities
  STATUS_CHANGED
  STAGE_CHANGED
  PROPERTY_UPDATED
  OWNER_UPDATED
  FINANCIAL_UPDATED
  LEGAL_UPDATED
  NOTE_ADDED
  DOCUMENT_ADDED
  ASSIGNMENT_CHANGED
  PRIORITY_CHANGED
}

enum MeetingType {
  SITE_VISIT
  COORDINATION
  DECISION
  PUBLIC_CONSULTATION
  TECHNICAL_REVIEW
  LEGAL_REVIEW
  NEGOTIATION
  STATUS_UPDATE
  RECURRING
  EMERGENCY
  TRAINING
  BOARD_MEETING
  COMMITTEE_MEETING
  STAKEHOLDER_MEETING
  KICKOFF_MEETING
  REVIEW_MEETING
  PLANNING_MEETING
  RETROSPECTIVE
}

// Enhanced Meeting Management Enums
enum MeetingStatus {
  DRAFT
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
  RESCHEDULED
  ARCHIVED
}

enum ParticipantRole {
  ORGANIZER
  PRESENTER
  ATTENDEE
  OPTIONAL_ATTENDEE
  NOTE_TAKER
  TIMEKEEPER
  FACILITATOR
  OBSERVER
  GUEST_SPEAKER
  VOTING_MEMBER
  NON_VOTING_MEMBER
}

enum RSVPStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
  NO_RESPONSE
  DELEGATED
}

enum AgendaItemType {
  PRESENTATION
  DISCUSSION
  DECISION
  VOTE
  ANNOUNCEMENT
  BREAK
  ACTION_ITEM
  REVIEW
  APPROVAL
  INFORMATION
}

enum DecisionType {
  APPROVAL
  REJECTION
  AMENDMENT
  POSTPONEMENT
  TABLING
  REFERRAL
  CONSENSUS
  MAJORITY_VOTE
  UNANIMOUS
}

enum DecisionPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum CommitmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
  ON_HOLD
  REASSIGNED
}

enum VotingMethod {
  SIMPLE_MAJORITY
  QUALIFIED_MAJORITY
  UNANIMOUS
  CONSENSUS
  WEIGHTED_VOTE
  PROXY_VOTE
  ANONYMOUS
  ROLL_CALL
}

enum VoteType {
  FOR
  AGAINST
  ABSTAIN
  ABSENT
}

enum MeetingEffectiveness {
  VERY_POOR
  POOR
  AVERAGE
  GOOD
  EXCELLENT
}

enum NotificationChannel {
  EMAIL
  IN_APP
  SMS
  PUSH_NOTIFICATION
  CALENDAR_INVITE
  WHATSAPP
}

enum RecurrencePattern {
  DAILY
  WEEKLY
  BI_WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum MeetingPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  TASK_ASSIGNED
  DEADLINE_REMINDER
  STATUS_UPDATE
  SYSTEM_ANNOUNCEMENT
}

enum PermissionType {
  READ
  WRITE
  DELETE
  ASSIGN
  SUPERVISE
  EXPORT
  IMPORT
  MANAGE_USERS
  MANAGE_DEPARTMENTS
  SYSTEM_CONFIG
  VIEW_REPORTS
  APPROVE_DECISIONS
  COORDINATE_MEETINGS
  VALIDATE_CHECKLISTS
  SIGN_DOCUMENTS
  APPROVE_WORKFLOWS
  MANAGE_REVIEWS
  CREATE_OBSERVATIONS
  VIEW_RISK_ASSESSMENT
  // Document management permissions
  UPLOAD_DOCUMENTS
  DOWNLOAD_DOCUMENTS
  VIEW_DOCUMENTS
  EDIT_DOCUMENTS
  DELETE_DOCUMENTS
  MANAGE_DOCUMENT_TEMPLATES
  MANAGE_DOCUMENT_CATEGORIES
  APPROVE_DOCUMENTS
  SHARE_DOCUMENTS
  VERSION_DOCUMENTS
  PREVIEW_DOCUMENTS
  SEARCH_DOCUMENTS
  BULK_DOWNLOAD_DOCUMENTS
  MANAGE_DOCUMENT_PERMISSIONS
  SIGN_DOCUMENTS_DIGITAL
  AUDIT_DOCUMENTS
}

// Validation System Enums
enum ChecklistItemType {
  DOCUMENT
  ACTION
  VERIFICATION
  APPROVAL
  INSPECTION
  SIGNATURE
  PAYMENT
  NOTIFICATION
}

enum SignatureType {
  APPROVAL
  REJECTION
  REVIEW
  WITNESS
  CERTIFICATION
  VALIDATION
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CONDITIONAL
  DELEGATED
  ESCALATED
}

enum ReviewType {
  INTERNAL_CONTROL
  TECHNICAL_ANALYSIS
  LEGAL_REVIEW
  FINANCIAL_REVIEW
  SUPERVISORY_REVIEW
  QUALITY_ASSURANCE
}

enum ObservationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  BLOCKING
}

enum ObservationStatus {
  OPEN
  IN_PROGRESS
  RESPONDED
  RESOLVED
  CLOSED
  ESCALATED
}

enum ValidationRuleType {
  REQUIRED_FIELD
  DOCUMENT_COMPLETENESS
  BUSINESS_RULE
  REGULATORY_COMPLIANCE
  TIME_LIMIT
  FINANCIAL_THRESHOLD
  APPROVAL_MATRIX
}

enum RiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
  CRITICAL
}

enum AlertType {
  DEADLINE_APPROACHING
  DEADLINE_EXCEEDED
  DOCUMENT_MISSING
  VALIDATION_FAILED
  APPROVAL_REQUIRED
  RISK_IDENTIFIED
  OBSERVATION_OVERDUE
  ESCALATION_REQUIRED
}

// Document Management Enums
enum DocumentType {
  LEGAL_DOCUMENT
  TECHNICAL_REPORT
  FINANCIAL_RECORD
  PROPERTY_DOCUMENT
  IDENTIFICATION_DOCUMENT
  NOTIFICATION_DOCUMENT
  CONTRACT_DOCUMENT
  PHOTOGRAPH
  VIDEO
  AUDIO
  SPREADSHEET
  PRESENTATION
  OTHER
}

enum DocumentStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  ARCHIVED
  EXPIRED
  UNDER_REVIEW
  FINAL
  SUPERSEDED
}

enum DocumentCategory {
  LEGAL
  TECHNICAL
  FINANCIAL
  ADMINISTRATIVE
  COMMUNICATION
  PHOTOGRAPHIC
  MULTIMEDIA
  TEMPLATE
  REFERENCE
  CORRESPONDENCE
}

enum DocumentStorageType {
  LOCAL
  CLOUD
  HYBRID
  BACKUP
  ARCHIVE
}

enum DocumentSecurityLevel {
  PUBLIC
  INTERNAL
  CONFIDENTIAL
  SECRET
  TOP_SECRET
}

enum DocumentActionType {
  UPLOADED
  DOWNLOADED
  VIEWED
  EDITED
  DELETED
  ARCHIVED
  RESTORED
  SHARED
  SIGNED
  APPROVED
  REJECTED
  VERSIONED
  COPIED
  MOVED
  TAGGED
  CATEGORIZED
}

enum TemplateType {
  LEGAL_TEMPLATE
  FORM_TEMPLATE
  REPORT_TEMPLATE
  LETTER_TEMPLATE
  CONTRACT_TEMPLATE
  MEMO_TEMPLATE
  CERTIFICATE_TEMPLATE
  NOTIFICATION_TEMPLATE
}

enum SignatureStatus {
  PENDING
  SIGNED
  REJECTED
  EXPIRED
  REVOKED
  INVALID
}

model Department {
  id        String       @id @default(cuid())
  name      String
  code      String       @unique
  parentId  String?
  parent    Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentHierarchy")

  // Department details
  description String?
  headUserId  String?    // Department head/manager
  contactInfo Json?      // Contact information (email, phone, address)
  location    Json?      // Physical location details
  type        String?    // Department type/classification

  // Status management
  isActive      Boolean @default(true)
  isSuspended   Boolean @default(false)
  suspensionReason String?
  suspendedAt   DateTime?
  suspendedBy   String?

  // Statistics and metadata
  userCapacity  Int?     // Maximum user capacity
  budget        Float?   // Department budget
  operatingHours Json?   // Operating hours/schedule

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users                   User[]
  cases                   Case[]
  userDepartmentAssignments UserDepartmentAssignment[]
  headUser                User?    @relation("DepartmentHead", fields: [headUserId], references: [id])
  departmentStageAssignments DepartmentStageAssignment[]
  departmentPermissions DepartmentPermission[]
  departmentTransfers    DepartmentTransfer[] @relation("SourceDepartment")
  destinationTransfers   DepartmentTransfer[] @relation("DestinationDepartment")
  documentPermissions DocumentPermission[] @relation("DocumentDepartmentPermissions")
  meetingTemplates MeetingTemplate[] @relation("DepartmentTemplates")
  notificationTemplates NotificationTemplate[] @relation("DepartmentNotificationTemplates")

  @@index([parentId])
  @@index([isActive])
  @@index([isSuspended])
  @@index([headUserId])
  @@index([code])
  @@map("departments")
}

model Permission {
  id          String         @id @default(cuid())
  name        String         @unique
  type        PermissionType
  description String?
  resource    String? // e.g., "cases", "users", "departments", "reports"
  action      String? // e.g., "create", "read", "update", "delete"
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  rolePermissions RolePermission[]
  departmentPermissions DepartmentPermission[]

  @@map("permissions")
}

model RolePermission {
  id        String   @id @default(cuid())
  isGranted Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json // Store permissions as JSON for flexibility
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users           User[]
  rolePermissions RolePermission[]
  documentPermissions DocumentPermission[] @relation("DocumentRolePermissions")

  @@map("roles")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  username             String    @unique
  passwordHash         String
  firstName            String
  lastName             String
  phone                String?
  avatar               String?
  isActive             Boolean   @default(true)

  // Status and suspension
  isSuspended          Boolean   @default(false)
  suspensionReason     String?
  suspendedAt          DateTime?
  suspendedBy          String?

  // Login tracking
  lastLoginAt          DateTime?
  lastLoginIp          String?
  lastLoginUserAgent   String?
  loginCount           Int       @default(0)
  failedLoginAttempts  Int       @default(0)
  lockedUntil          DateTime?

  // Password management
  passwordResetToken   String?
  passwordResetExpires DateTime?
  passwordChangedAt    DateTime  @default(now())
  mustChangePassword   Boolean   @default(false)

  // Profile information
  jobTitle             String?
  bio                  String?
  officeLocation       String?
  workingHours         String?   // JSON with schedule
  preferredLanguage    String    @default("es")
  timezone             String    @default("America/Santo_Domingo")

  // Security settings
  twoFactorEnabled     Boolean   @default(false)
  twoFactorSecret      String?
  backupCodes          String?   // JSON array of backup codes

  // Email preferences
  emailNotifications   Boolean   @default(true)
  emailMarketing       Boolean   @default(false)
  emailDigest          Boolean   @default(true)

  // System settings
  theme                String    @default("light")
  dateRange            String?   // JSON with preferences
  dashboardConfig      String?   // JSON with dashboard layout

  // Soft delete
  deletedAt            DateTime?
  deletedBy            String?

  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict)

  // Case relationships
  createdCases    Case[] @relation("CaseCreator")
  assignedCases   Case[] @relation("CaseAssignee")
  supervisedCases Case[] @relation("CaseSupervisor")

  // Activity tracking
  activities    Activity[]
  caseHistories CaseHistory[]
  documents     Document[]
  notifications Notification[]
  assignments   CaseAssignment[]
  sessions      UserSession[]
  passwordHistories PasswordHistory[]
  departmentAssignments UserDepartmentAssignment[]
  headOfDepartments Department[] @relation("DepartmentHead")
  departmentTransfers DepartmentTransfer[]
  receivedStageNotifications StageNotification[]

  // Validation system relations
  digitalSignatures DigitalSignature[]
  initiatedWorkflows ApprovalWorkflow[] @relation("ApprovalInitiator")
  completedWorkflows ApprovalWorkflow[] @relation("ApprovalCompleter")
  approvals Approval[]
  timeTracking TimeTracking[]
  assignedReviews ReviewAssignment[] @relation("ReviewAssignee")
  createdReviews ReviewAssignment[] @relation("ReviewAssigner")
  reviewSubmissions Review[] @relation("ReviewReviewer")
  createdObservations Observation[] @relation("ObservationObserver")
  assignedObservations Observation[] @relation("ObservationAssignee")
  observationResponses ObservationResponse[] @relation("ObservationResponder")
  acknowledgedRiskAlerts RiskAlert[] @relation("RiskAlertAcknowledger")
  resolvedRiskAlerts RiskAlert[] @relation("RiskAlertResolver")
  riskAssessments RiskAssessment[]

  // Document management relations
  documentVersions DocumentVersion[] @relation("DocumentVersionCreator")
  templateVersions DocumentTemplateVersion[]
  documentPermissions DocumentPermission[] @relation("DocumentUserPermissions")
  documentHistories DocumentHistory[] @relation("DocumentHistoryUser")
  documentActions DocumentAction[] @relation("DocumentActionUser")
  documentShares DocumentShare[]
  initiatedDocumentWorkflows DocumentWorkflow[] @relation("DocumentWorkflowInitiator")
  completedDocumentWorkflows DocumentWorkflow[] @relation("DocumentWorkflowCompleter")
  documentComments DocumentComment[] @relation("DocumentCommentAuthor")
  resolvedDocumentComments DocumentComment[] @relation("DocumentCommentResolver")
  createdTemplates DocumentTemplate[] @relation("TemplateCreator")

  // Meeting management relations
  organizedMeetings Meeting[] @relation("MeetingOrganizer")
  chairedMeetings Meeting[] @relation("MeetingChair")
  meetingParticipations MeetingParticipant[] @relation("MeetingParticipants")
  meetingInvitations MeetingParticipant[] @relation("MeetingInvitations")
  agendaPresentations MeetingAgendaItem[] @relation("AgendaPresenters")
  agendaOwnership MeetingAgendaItem[] @relation("AgendaOwners")
  proposedDecisions MeetingDecision[] @relation("DecisionsProposed")
  approvedDecisions MeetingDecision[] @relation("DecisionsApproved")
  reviewedDecisions MeetingDecision[] @relation("DecisionsReviewed")
  assignedCommitments MeetingCommitment[] @relation("CommitmentAssignee")
  createdCommitments MeetingCommitment[] @relation("CommitmentAssigner")
  reviewedCommitments MeetingCommitment[] @relation("CommitmentReviewer")
  approvedCommitments MeetingCommitment[] @relation("CommitmentApprover")
  commitmentUpdates CommitmentProgress[] @relation("CommitmentUpdates")
  uploadedMeetingDocuments MeetingDocument[] @relation("MeetingDocumentUploaders")
  draftedMinutes MeetingMinutes[] @relation("MinutesDrafted")
  reviewedMinutes MeetingMinutes[] @relation("MinutesReviewed")
  approvedMinutes MeetingMinutes[] @relation("MinutesApproved")
  createdVotingSessions VotingSession[] @relation("VotingSessionsCreated")
  userVotes VotingRecord[] @relation("UserVotes")
  voteModifications VotingRecord[] @relation("VoteModifiers")
  meetingNotifications MeetingNotification[] @relation("MeetingNotifications")
  createdNotifications MeetingNotification[] @relation("NotificationsCreated")
  createdAnalytics MeetingAnalytics[] @relation("AnalyticsCreated")
  resolvedConflicts MeetingConflict[] @relation("ConflictsResolved")
  detectedConflicts MeetingConflict[] @relation("ConflictsDetected")
  createdMeetingTemplates MeetingTemplate[] @relation("TemplatesCreated")
  approvedMeetingTemplates MeetingTemplate[] @relation("TemplatesApproved")

  // Notification system relations
  notificationPreference UserNotificationPreference?
  webSocketConnections WebSocketConnection[]
  pushSubscriptions PushSubscription[]
  createdNotificationTemplates NotificationTemplate[] @relation("TemplatesCreated")

  // Delegation relations
  delegatedFromParticipations MeetingParticipant[] @relation("DelegatedFrom")
  delegatedToParticipations MeetingParticipant[] @relation("DelegatedTo")

  // NextAuth.js relations
  accounts      Account[]
  sessions_auth Session[]

  @@index([email])
  @@index([username])
  @@index([departmentId])
  @@index([roleId])
  @@index([isActive])
  @@index([isSuspended])
  @@index([lastLoginAt])
  @@index([deletedAt])
  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  ipAddress    String?
  userAgent    String?
  deviceInfo   String?  // JSON with device details
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastAccessAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

model PasswordHistory {
  id             String   @id @default(cuid())
  passwordHash   String
  changedAt      DateTime @default(now())
  changedBy      String?  // ID of user who changed the password
  changeReason   String?  // admin_reset, user_change, expired, etc.
  ipAddress      String?
  userAgent      String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([changedAt])
  @@map("password_histories")
}

model UserDepartmentAssignment {
  id           String   @id @default(cuid())
  userId       String
  departmentId String
  isPrimary    Boolean  @default(false)
  assignedAt   DateTime @default(now())
  assignedBy   String?  // ID of user who made the assignment
  isActive     Boolean  @default(true)
  permissions  String?  // JSON with specific permissions for this department

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@index([userId])
  @@index([departmentId])
  @@map("user_department_assignments")
}

model Case {
  id           String     @id @default(cuid())
  fileNumber   String     @unique // Enhanced from caseNumber to fileNumber
  title        String
  description  String?
  currentStage CaseStage  @default(RECEPCION_SOLICITUD)
  priority     Priority   @default(MEDIUM)
  status       CaseStatus @default(PENDIENTE)

  // Dates
  startDate       DateTime  @default(now())
  expectedEndDate DateTime?
  actualEndDate   DateTime?

  // Property Information
  propertyAddress    String
  propertyCity       String
  propertyProvince   String
  propertyDescription String?
  propertyCoordinates String? // GPS coordinates
  propertyArea       Float?   // Area in square meters
  propertyType       String?  // Type of property (residential, commercial, etc.)

  // Owner Information
  ownerName          String
  ownerIdentification String? // ID number or tax ID
  ownerContact       String?  // Phone number
  ownerEmail         String?
  ownerAddress       String?
  ownerType          String?  // Individual, company, government, etc.

  // Financial Information
  estimatedValue     Float?
  actualValue        Float?
  appraisalValue     Float?
  compensationAmount Float?
  currency           String   @default("DOP") // Dominican Peso

  // Legal Information
  expropriationDecree String? // Legal decree number
  judicialCaseNumber  String? // Court case number if applicable
  legalStatus         String? // Current legal status

  // Progress tracking
  progressPercentage Float @default(0)

  // Soft delete
  deletedAt DateTime?
  deletedBy String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)

  createdById String
  createdBy   User   @relation("CaseCreator", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("CaseAssignee", fields: [assignedToId], references: [id])

  supervisedById String?
  supervisedBy   User?   @relation("CaseSupervisor", fields: [supervisedById], references: [id])

  // Related data
  documents   Document[]
  histories   CaseHistory[]
  activities  Activity[]
  caseMeetings Meeting[] @relation("MeetingCase")
  assignments CaseAssignment[]

  // Workflow relations
  stageAssignments CaseStageAssignment[]
  stageProgressions StageProgression[]
  stageNotifications StageNotification[]

  // Validation system relations
  approvalWorkflows ApprovalWorkflow[]
  timeTracking TimeTracking[]
  reviewAssignments ReviewAssignment[]
  observations Observation[]
  validationExecutions ValidationExecution[]
  riskAssessments RiskAssessment[]

  @@index([fileNumber])
  @@index([currentStage])
  @@index([priority])
  @@index([status])
  @@index([departmentId])
  @@index([createdById])
  @@index([assignedToId])
  @@index([supervisedById])
  @@index([createdAt])
  @@index([startDate])
  @@index([expectedEndDate])
  @@index([deletedAt])
  @@index([ownerName])
  @@index([propertyAddress])
  @@map("cases")
}

model Document {
  id          String                @id @default(cuid())
  title       String
  description String?
  fileName    String
  originalFileName String?
  filePath    String
  fileSize    Int
  mimeType    String
  fileHash    String? // MD5/SHA hash for integrity verification

  // Document categorization
  documentType     DocumentType @default(OTHER)
  category         DocumentCategory @default(ADMINISTRATIVE)
  status           DocumentStatus @default(DRAFT)
  securityLevel    DocumentSecurityLevel @default(INTERNAL)

  // Version control
  version     Int     @default(1)
  isLatest    Boolean @default(true)
  isDraft     Boolean @default(true)

  // Access control
  isPublic    Boolean @default(false)
  isEncrypted Boolean @default(false)
  encryptionKey String? // Encrypted storage key

  // Metadata
  tags        String? // Comma-separated tags
  metadata    Json?   // Additional metadata as JSON
  customFields Json?  // Custom fields specific to document type

  // Document lifecycle
  expiresAt   DateTime?
  archivedAt  DateTime?
  archivedBy  String?
  retentionPeriod Int? // Retention period in days

  // Content indexing for search
  contentText String? // Extracted text content for full-text search
  isIndexed   Boolean @default(false)
  indexedAt   DateTime?

  // Thumbnail and preview
  thumbnailPath String? // Path to generated thumbnail
  previewGenerated Boolean @default(false)

  // Storage information
  storageType DocumentStorageType @default(LOCAL)
  storageLocation String? // Physical storage location identifier
  backupLocation String? // Backup storage location

  // Audit and tracking
  downloadCount Int @default(0)
  viewCount Int @default(0)
  lastAccessedAt DateTime?
  lastAccessedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  caseId String?
  case   Case?   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  // Version control
  parentId String?
  parent   Document?  @relation("DocumentVersion", fields: [parentId], references: [id])
  children Document[] @relation("DocumentVersion")

  // Template relationship
  templateId String?
  template DocumentTemplate? @relation("DocumentFromTemplate", fields: [templateId], references: [id])

  // Category relationship
  categoryId String?
  categoryRef DocumentCategoryRef? @relation("CategoryDocuments", fields: [categoryId], references: [id])

  // Related documents and permissions
  permissions DocumentPermission[]
  versions DocumentVersion[]
  history DocumentHistory[]
  signatures DigitalSignature[] @relation("DocumentSignatures")
  tagsRelations DocumentTag[]
  actions DocumentAction[]
  shares DocumentShare[]
  workflows DocumentWorkflow[]
  comments DocumentComment[]

  @@index([caseId])
  @@index([uploadedById])
  @@index([documentType])
  @@index([category])
  @@index([status])
  @@index([securityLevel])
  @@index([version])
  @@index([isLatest])
  @@index([isPublic])
  @@index([createdAt])
  @@index([expiresAt])
  @@index([fileHash])
  @@index([contentText])
  @@map("documents")
}

model CaseHistory {
  id            String     @id @default(cuid())
  action        String     // Type of change: status_change, stage_change, assignment_change, field_update, etc.
  field         String?    // Which field was changed
  previousValue String?    // JSON string with previous value
  newValue      String?    // JSON string with new value
  reason        String?    // Reason for the change
  notes         String?    // Additional notes
  duration      Int?       // Duration in days at previous stage (for stage changes)
  ipAddress     String?    // IP address of the user making the change
  userAgent     String?    // User agent of the browser

  createdAt DateTime @default(now())

  // Relations
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  changedById String
  changedBy   User   @relation(fields: [changedById], references: [id])

  @@index([caseId])
  @@index([changedById])
  @@index([action])
  @@index([createdAt])
  @@map("case_histories")
}

model Activity {
  id          String       @id @default(cuid())
  action      ActivityType // created, updated, deleted, assigned, etc.
  entityType  String // case, document, user, etc.
  entityId    String
  description String?
  metadata    Json? // Additional data about the activity

  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  caseId String?
  case   Case?   @relation(fields: [caseId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@index([caseId])
  @@map("activities")
}

model CaseAssignment {
  id         String   @id @default(cuid())
  type       String // analyst, reviewer, approver, etc.
  isActive   Boolean  @default(true)
  assignedAt DateTime @default(now())

  // Relations
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([caseId, userId, type])
  @@map("case_assignments")
}

// ========================================
// COMPREHENSIVE MEETING MANAGEMENT MODELS
// ========================================

// Enhanced Meeting Model
model Meeting {
  id          String         @id @default(cuid())
  title       String
  description String?
  meetingType MeetingType
  priority    MeetingPriority @default(MEDIUM)
  status      MeetingStatus  @default(DRAFT)

  // Meeting details
  location    String?
  virtual     Boolean        @default(false)
  meetingUrl  String?
  dialInInfo  String?        // Conference call details
  room        String?        // Physical meeting room
  equipment   Json?          // Required equipment list

  // Scheduling
  scheduledStart DateTime
  scheduledEnd   DateTime
  actualStart    DateTime?
  actualEnd      DateTime?
  timezone       String        @default("America/Santo_Domingo")

  // Duration
  plannedDuration Int          // Planned duration in minutes
  actualDuration  Int?         // Actual duration in minutes

  // Recurrence
  isRecurring     Boolean      @default(false)
  recurrenceRule  Json?        // RRULE format for recurring meetings
  parentMeetingId String?      // For recurring meeting series
  parentMeeting   Meeting?     @relation("MeetingSeries", fields: [parentMeetingId], references: [id])
  childMeetings   Meeting[]    @relation("MeetingSeries")

  // Meeting settings
  maxParticipants  Int?
  allowGuests      Boolean     @default(true)
  requireApproval  Boolean     @default(false)
  isPrivate        Boolean     @default(false)
  recordMeeting    Boolean     @default(false)
  enableChat       Boolean     @default(true)
  enableScreenShare Boolean    @default(true)

  // Organizer and chair
  organizerId String
  organizer   User   @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  chairId     String?
  chair       User?  @relation("MeetingChair", fields: [chairId], references: [id])

  // Meeting statistics
  invitedCount    Int          @default(0)
  acceptedCount   Int          @default(0)
  attendedCount   Int          @default(0)
  effectiveness   MeetingEffectiveness?

  // Meeting metadata
  agendaTemplateId String?
  minutesTemplate  String?
  tags             String?
  metadata         Json?        // Additional meeting metadata

  // Cancellation and rescheduling
  cancelledAt      DateTime?
  cancelledBy      String?
  cancellationReason String?
  rescheduledFrom  DateTime?
  rescheduledTo    DateTime?
  rescheduledBy    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  caseId String?
  case   Case?   @relation("MeetingCase", fields: [caseId], references: [id], onDelete: SetNull)

  // Meeting relationships
  participants     MeetingParticipant[]
  agendaItems      MeetingAgendaItem[]
  decisions        MeetingDecision[]
  commitments      MeetingCommitment[]
  documents        MeetingDocument[]
  votingSessions   VotingSession[]
  minutes          MeetingMinutes[]
  notifications    MeetingNotification[]
  analytics        MeetingAnalytics[]
  conflicts        MeetingConflict[] @relation("MeetingConflicts")

  // Template relationships
  agendaTemplate   MeetingTemplate? @relation("AgendaTemplateMeetings", fields: [agendaTemplateId], references: [id])

  @@index([meetingType])
  @@index([status])
  @@index([priority])
  @@index([scheduledStart])
  @@index([scheduledEnd])
  @@index([organizerId])
  @@index([chairId])
  @@index([caseId])
  @@index([isRecurring])
  @@index([parentMeetingId])
  @@index([virtual])
  @@index([createdAt])
  @@map("meetings")
}

// Meeting Participant Model
model MeetingParticipant {
  id         String         @id @default(cuid())
  meetingId  String
  userId     String?
  email      String?        // For external participants
  name       String?        // For external participants
  phone      String?        // For external participants
  organization String?      // For external participants
  role       ParticipantRole @default(ATTENDEE)

  // RSVP management
  rsvpStatus RSVPStatus     @default(PENDING)
  rsvpAt     DateTime?
  rsvpNotes  String?

  // Attendance tracking
  attended   Boolean        @default(false)
  joinedAt   DateTime?
  leftAt     DateTime?
  attendanceDuration Int?   // Attendance duration in minutes

  // Participation metrics
  spokeCount Int            @default(0)
  questionsAsked Int        @default(0)
  commentsMade Int          @default(0)

  // Permissions
  canEditAgenda    Boolean  @default(false)
  canUploadDocs    Boolean  @default(false)
  canVote          Boolean  @default(false)
  canInviteOthers  Boolean  @default(false)

  // Delegation
  delegatedTo     String?   // User ID of delegate
  delegatedFrom   String?   // User ID who delegated
  delegationReason String?

  // Notifications
  reminderSent    Boolean   @default(false)
  lastReminderAt  DateTime?
  followUpSent    Boolean   @default(false)

  // External participant info
  isExternal      Boolean   @default(false)
  accessCode      String?
  accessLink      String?
  expiresAt       DateTime?

  invitedBy       String
  invitedAt       DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  meeting  Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user     User?   @relation("MeetingParticipants", fields: [userId], references: [id])
  invitee  User?   @relation("MeetingInvitations", fields: [invitedBy], references: [id])

  // Delegate relationships
  delegatorUser User?  @relation("DelegatedFrom", fields: [delegatedFrom], references: [id])
  delegateUser  User?  @relation("DelegatedTo", fields: [delegatedTo], references: [id])

  // Voting records
  votes VotingRecord[]

  @@unique([meetingId, userId])
  @@unique([meetingId, email])
  @@index([meetingId])
  @@index([userId])
  @@index([email])
  @@index([rsvpStatus])
  @@index([role])
  @@index([attended])
  @@index([isExternal])
  @@index([invitedAt])
  @@map("meeting_participants")
}

// Meeting Agenda Item Model
model MeetingAgendaItem {
  id         String          @id @default(cuid())
  meetingId  String
  title      String
  description String?
  type       AgendaItemType
  sequence   Int

  // Time management
  plannedDuration Int        // Planned duration in minutes
  actualDuration  Int?       // Actual duration in minutes
  startTime       DateTime?  // Actual start time
  endTime         DateTime?  // Actual end time

  // Presenter and ownership
  presenterId String?
  presenter   User?  @relation("AgendaPresenters", fields: [presenterId], references: [id])
  ownerId     String?        // Person responsible for this item
  owner       User?  @relation("AgendaOwners", fields: [ownerId], references: [id])

  // Content and materials
  content     String?        // Detailed content
  materials   Json?          // List of materials/documents
  preparation String?        // Preparation instructions

  // Status and outcome
  status      String         @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, SKIPPED
  outcome     String?        // Outcome summary
  actionItems String?        // Action items identified

  // Voting and decisions
  requiresVote Boolean        @default(false)
  votingSessionId String?
  decisionId   String?

  // Discussion management
  allowDiscussion Boolean     @default(true)
  discussionTime Int?         // Time allocated for discussion

  // Dependencies
  dependsOn    String?        // Previous agenda item dependency
  blockedBy    String?        // What blocks this item

  // Priority and importance
  priority     DecisionPriority @default(MEDIUM)
  isRequired   Boolean        @default(true)
  isOptional   Boolean        @default(false)

  createdBy    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  votingSession VotingSession? @relation("AgendaVotingSession", fields: [votingSessionId], references: [id])
  decision MeetingDecision? @relation("AgendaDecision", fields: [decisionId], references: [id])

  // Document attachments
  documents MeetingDocument[] @relation("AgendaDocuments")

  @@unique([meetingId, sequence])
  @@unique([votingSessionId])
  @@unique([decisionId])
  @@index([meetingId])
  @@index([type])
  @@index([presenterId])
  @@index([ownerId])
  @@index([status])
  @@index([priority])
  @@index([requiresVote])
  @@index([createdAt])
  @@map("meeting_agenda_items")
}

// Meeting Decision Model
model MeetingDecision {
  id           String         @id @default(cuid())
  meetingId    String
  agendaItemId String?
  title        String
  description  String
  decisionType DecisionType
  priority     DecisionPriority @default(MEDIUM)

  // Decision details
  proposal     String?        // Original proposal
  rationale    String?        // Decision rationale
  alternatives  String?       // Considered alternatives
  impact       String?        // Impact assessment
  implementation String?      // Implementation plan

  // Voting details
  votingMethod VotingMethod?
  votingSessionId String?
  voteResult   Json?          // Detailed voting results
  consensusLevel String?      // Level of consensus achieved

  // Decision status
  status       String         @default("PROPOSED") // PROPOSED, UNDER_REVIEW, APPROVED, REJECTED, IMPLEMENTED
  approvedAt   DateTime?
  implementedAt DateTime?

  // Related entities
  caseId       String?
  expedienteId String?        // Related expediente/case
  departmentId String?        // Responsible department

  // Decision lifecycle
  effectiveDate DateTime?
  reviewDate   DateTime?
  expiryDate   DateTime?

  // Documentation
  supportingDocs Json?        // Supporting documents
  attachments    Json?        // Decision attachments

  // Tracking
  followUpRequired Boolean    @default(false)
  followUpStatus  String?
  followUpItems   Json?       // Follow-up action items

  // Approval workflow
  proposedBy   String
  proposedAt   DateTime @default(now())
  approvedBy   String?
  reviewedBy   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  meeting     Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  agendaItem  MeetingAgendaItem? @relation("AgendaDecision")
  votingSession VotingSession? @relation("DecisionVoting", fields: [votingSessionId], references: [id])

  // User relationships
  proposer User  @relation("DecisionsProposed", fields: [proposedBy], references: [id])
  approver User? @relation("DecisionsApproved", fields: [approvedBy], references: [id])
  reviewer User? @relation("DecisionsReviewed", fields: [reviewedBy], references: [id])

  // Related commitments
  commitments MeetingCommitment[] @relation("DecisionCommitments")

  @@unique([votingSessionId])
  @@index([meetingId])
  @@index([agendaItemId])
  @@index([decisionType])
  @@index([status])
  @@index([priority])
  @@index([proposedBy])
  @@index([approvedAt])
  @@index([effectiveDate])
  @@index([caseId])
  @@map("meeting_decisions")
}

// Meeting Commitment Model
model MeetingCommitment {
  id           String           @id @default(cuid())
  meetingId    String
  decisionId   String?
  agendaItemId String?
  title        String
  description  String

  // Assignment details
  assignedTo   String           // User ID
  assignedBy   String           // User ID who assigned it
  assignee     User @relation("CommitmentAssignee", fields: [assignedTo], references: [id])
  assigner     User @relation("CommitmentAssigner", fields: [assignedBy], references: [id])

  // Status tracking
  status       CommitmentStatus @default(PENDING)
  priority     DecisionPriority @default(MEDIUM)

  // Timeline
  dueDate      DateTime
  completedAt  DateTime?
  reviewedAt   DateTime?

  // Progress tracking
  progressPercentage Int         @default(0)
  estimatedHours   Int?
  actualHours      Int?

  // Completion details
  completionNotes  String?
  deliverables     Json?        // Expected deliverables
  actualDeliverables Json?      // Actual deliverables

  // Dependencies
  dependsOn        String?      // Previous commitment dependency
  blocks           String?      // What this commitment blocks

  // Resources and support
  requiredResources Json?       // Resources needed
  supportNeeded    String?

  // Review and approval
  reviewRequired   Boolean      @default(false)
  reviewedBy       String?
  approvedBy       String?

  // Risk assessment
  riskLevel        String?
  riskMitigation   String?

  // Communication
  updates          String?      // Progress updates
  lastUpdateAt     DateTime?

  // Escalation
  escalated        Boolean      @default(false)
  escalatedTo      String?
  escalatedAt      DateTime?
  escalationReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  decision  MeetingDecision? @relation("DecisionCommitments", fields: [decisionId], references: [id])

  // User relationships
  reviewer  User? @relation("CommitmentReviewer", fields: [reviewedBy], references: [id])
  approver  User? @relation("CommitmentApprover", fields: [approvedBy], references: [id])

  // Progress tracking
  progressUpdates CommitmentProgress[]

  @@index([meetingId])
  @@index([decisionId])
  @@index([assignedTo])
  @@index([assignedBy])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([completedAt])
  @@index([escalated])
  @@map("meeting_commitments")
}

// Commitment Progress Model
model CommitmentProgress {
  id           String   @id @default(cuid())
  commitmentId String
  updateType   String   // PROGRESS_UPDATE, STATUS_CHANGE, ISSUE, COMPLETION

  // Progress details
  previousStatus String?
  newStatus     String?
  progressChange Int?    // Change in percentage
  notes         String?
  attachments   Json?    // Supporting attachments

  // Time tracking
  hoursSpent    Int?     // Hours spent since last update
  remainingHours Int?    // Estimated remaining hours

  // Issues and blockers
  issues        String?  // Current issues
  blockers      String?  // Current blockers

  // User attribution
  updatedBy     String
  updatedAt     DateTime @default(now())

  // Relations
  commitment MeetingCommitment @relation(fields: [commitmentId], references: [id], onDelete: Cascade)
  updater    User @relation("CommitmentUpdates", fields: [updatedBy], references: [id])

  @@index([commitmentId])
  @@index([updateType])
  @@index([updatedBy])
  @@index([updatedAt])
  @@map("commitment_progress")
}

// Meeting Document Model
model MeetingDocument {
  id           String                @id @default(cuid())
  meetingId    String
  agendaItemId String?

  // Document details
  title        String
  description  String?
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  fileHash     String?

  // Document classification
  documentType String               @default("MEETING_DOCUMENT")
  category     String               @default("GENERAL")
  version      Int                  @default(1)
  isRequired   Boolean              @default(false)

  // Access control
  isPublic     Boolean              @default(false)
  accessLevel  String               @default("PARTICIPANTS")

  // Sharing and distribution
  shareBeforeMeeting Boolean        @default(false)
  shareAfterMeeting  Boolean        @default(true)
  distributionList  Json?           // List of recipients

  // Document lifecycle
  uploadedAt   DateTime             @default(now())
  uploadedBy   String
  uploader     User @relation("MeetingDocumentUploaders", fields: [uploadedBy], references: [id])

  // Version control
  parentId     String?
  parentDoc    MeetingDocument?     @relation("DocumentVersions", fields: [parentId], references: [id])
  childDocs    MeetingDocument[]    @relation("DocumentVersions")

  // Usage tracking
  downloadCount Int                 @default(0)
  viewCount     Int                 @default(0)
  lastAccessed  DateTime?

  // Metadata
  tags         String?
  metadata     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  meeting     Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  agendaItem  MeetingAgendaItem? @relation("AgendaDocuments", fields: [agendaItemId], references: [id])

  @@index([meetingId])
  @@index([agendaItemId])
  @@index([uploadedBy])
  @@index([documentType])
  @@index([category])
  @@index([isRequired])
  @@index([uploadedAt])
  @@map("meeting_documents")
}

// Voting Session Model
model VotingSession {
  id           String       @id @default(cuid())
  meetingId    String
  agendaItemId String?
  decisionId   String?
  title        String
  description  String?

  // Voting configuration
  votingMethod VotingMethod
  quorumRequired Int        @default(1)  // Minimum votes required
  majorityRequired Int?     // Votes needed for majority (percentage)
  timeLimit     Int?        // Time limit in minutes
  allowAbstention Boolean   @default(true)
  anonymousVoting Boolean   @default(false)
  proxyVotingAllowed Boolean @default(false)

  // Voting status
  status        String      @default("PENDING") // PENDING, ACTIVE, COMPLETED, CANCELLED
  startedAt     DateTime?
  endedAt       DateTime?
  extendedUntil DateTime?    // If voting time is extended

  // Voting results
  totalVotes    Int         @default(0)
  forVotes      Int         @default(0)
  againstVotes  Int         @default(0)
  abstainVotes  Int         @default(0)
  invalidVotes  Int         @default(0)

  // Result calculation
  result        String?     // PASSED, FAILED, TIED, INVALID
  resultDetails Json?       // Detailed result analysis

  // Voting metadata
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  meeting    Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  agendaItem MeetingAgendaItem? @relation("AgendaVotingSession")
  decision   MeetingDecision? @relation("DecisionVoting")

  // User relationships
  creator User @relation("VotingSessionsCreated", fields: [createdBy], references: [id])

  // Voting records
  votes VotingRecord[]

  @@index([meetingId])
  @@index([agendaItemId])
  @@index([decisionId])
  @@index([status])
  @@index([createdBy])
  @@index([startedAt])
  @@index([endedAt])
  @@map("voting_sessions")
}

// Voting Record Model
model VotingRecord {
  id           String   @id @default(cuid())
  votingSessionId String
  participantId String  // MeetingParticipant ID
  userId       String?  // User ID (for internal participants)
  voteType     VoteType

  // Voting details
  vote         String?  // Additional vote details or comments
  justification String? // Reason for vote
  ipAddress    String?
  userAgent    String?

  // Proxy voting
  isProxy      Boolean  @default(false)
  proxyFor     String?  // Voting on behalf of
  proxyReason  String?

  // Vote tracking
  votedAt      DateTime @default(now())
  modifiedAt   DateTime?
  modifiedBy   String?

  // Validation
  isValid      Boolean  @default(true)
  validationErrors Json?

  // Relations
  votingSession VotingSession @relation(fields: [votingSessionId], references: [id], onDelete: Cascade)
  participant   MeetingParticipant @relation(fields: [participantId], references: [id])
  voter         User? @relation("UserVotes", fields: [userId], references: [id])
  modifier      User? @relation("VoteModifiers", fields: [modifiedBy], references: [id])

  @@unique([votingSessionId, participantId])
  @@index([votingSessionId])
  @@index([participantId])
  @@index([userId])
  @@index([voteType])
  @@index([votedAt])
  @@index([isValid])
  @@map("voting_records")
}

// Meeting Minutes Model
model MeetingMinutes {
  id           String   @id @default(cuid())
  meetingId    String
  title        String
  content      String

  // Minutes details
  summary      String?  // Executive summary
  keyDecisions Json?    // List of key decisions
  actionItems  Json?    // List of action items
  attendees    Json?    // List of attendees
  absentees    Json?    // List of absentees

  // Drafting and approval
  status       String   @default("DRAFT") // DRAFT, UNDER_REVIEW, APPROVED, PUBLISHED
  draftBy      String
  draftedAt    DateTime @default(now())
  reviewedBy   String?
  reviewedAt   DateTime?
  approvedBy   String?
  approvedAt   DateTime?
  publishedAt  DateTime?

  // Version control
  version      Int      @default(1)
  parentVersionId String?
  changeLog    String?  // Summary of changes

  // Content sections
  openingRemarks String?
  agendaSummary  Json?   // Summary of each agenda item
  discussions    Json?   // Key discussion points
  decisions      Json?   // Detailed decisions
  commitments    Json?   // Commitments and action items
  nextSteps      String? // Next steps and follow-up

  // Formatting and templates
  template      String?
  formatting    Json?    // Formatting preferences
  language      String   @default("es")

  // Distribution
  distributionList Json? // Who should receive the minutes
  internalOnly   Boolean @default(false)
  publicAccess   Boolean @default(false)

  // Attachments and references
  attachments   Json?    // Attached documents
  references    Json?    // Referenced documents

  // Metadata
  tags          String?
  metadata      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  // User relationships
  drafter   User @relation("MinutesDrafted", fields: [draftBy], references: [id])
  reviewer  User? @relation("MinutesReviewed", fields: [reviewedBy], references: [id])
  approver  User? @relation("MinutesApproved", fields: [approvedBy], references: [id])

  // Version relationships
  parentVersion MeetingMinutes? @relation("MinutesVersions", fields: [parentVersionId], references: [id])
  childVersions MeetingMinutes[] @relation("MinutesVersions")

  @@index([meetingId])
  @@index([status])
  @@index([draftBy])
  @@index([reviewedBy])
  @@index([approvedBy])
  @@index([version])
  @@index([draftedAt])
  @@index([approvedAt])
  @@map("meeting_minutes")
}

// Meeting Template Model
model MeetingTemplate {
  id          String             @id @default(cuid())
  name        String
  description String?
  category    String             @default("GENERAL")
  type        String             // AGENDA, MINUTES, CHECKLIST

  // Template content
  content     String             // Template content with placeholders
  structure   Json?              // Template structure definition
  placeholders Json?             // Available placeholders
  variables   Json?              // Template variables

  // Template configuration
  version     Int                @default(1)
  isActive    Boolean            @default(true)
  isDefault   Boolean            @default(false)

  // Usage and statistics
  usageCount  Int                @default(0)
  lastUsedAt  DateTime?

  // Access control
  requiredRole String?           // Role required to use this template
  departmentId String?           // Department-specific template

  // Approval workflow
  requiresApproval Boolean        @default(false)
  approvedBy   String?
  approvedAt   DateTime?

  // Metadata
  tags         String?
  metadata     Json?

  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department Department? @relation("DepartmentTemplates", fields: [departmentId], references: [id])
  agendaMeetings Meeting[] @relation("AgendaTemplateMeetings")

  // User relationships
  creator User @relation("TemplatesCreated", fields: [createdBy], references: [id])
  approver User? @relation("TemplatesApproved", fields: [approvedBy], references: [id])

  @@index([type])
  @@index([category])
  @@index([isActive])
  @@index([isDefault])
  @@index([createdBy])
  @@index([departmentId])
  @@map("meeting_templates")
}

// Meeting Notification Model
model MeetingNotification {
  id           String             @id @default(cuid())
  meetingId    String
  recipientId  String
  type         String             // INVITATION, REMINDER, CANCELLATION, RESCHEDULE, UPDATE, FOLLOW_UP

  // Notification content
  title        String
  message      String
  details      Json?              // Additional notification details

  // Delivery configuration
  channels     Json?              // Delivery channels (email, SMS, in-app, etc.)
  priority     String             @default("MEDIUM")
  importance   String             @default("NORMAL")

  // Scheduling
  scheduledAt  DateTime?
  sentAt       DateTime?
  deliveryStatus String           @default("PENDING") // PENDING, SENT, DELIVERED, FAILED, CANCELLED

  // Tracking
  openedAt     DateTime?
  clickedAt    DateTime?
  respondedAt  DateTime?
  response     String?            // Recipient's response

  // Reminder specifics
  reminderType String?            // FIRST, SECOND, FINAL, CUSTOM
  reminderOffset Int?             // Minutes before meeting

  // Delivery details
  emailSent    Boolean           @default(false)
  smsSent      Boolean           @default(false)
  pushSent     Boolean           @default(false)
  calendarInviteSent Boolean     @default(false)

  // Retry mechanism
  retryCount   Int               @default(0)
  maxRetries   Int               @default(3)
  nextRetryAt  DateTime?

  // Metadata
  metadata     Json?
  correlationId String?           // For tracking related notifications

  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  recipient User @relation("MeetingNotifications", fields: [recipientId], references: [id])
  creator   User @relation("NotificationsCreated", fields: [createdBy], references: [id])

  @@index([meetingId])
  @@index([recipientId])
  @@index([type])
  @@index([deliveryStatus])
  @@index([scheduledAt])
  @@index([sentAt])
  @@index([createdBy])
  @@map("meeting_notifications")
}

// Meeting Analytics Model
model MeetingAnalytics {
  id           String   @id @default(cuid())
  meetingId    String
  metricType   String   // ATTENDANCE, PARTICIPATION, EFFECTIVENESS, TIMING, DECISIONS, COMMITMENTS

  // Metric data
  metricName   String
  metricValue  Float
  metricUnit   String?  // percentage, count, minutes, score, etc.
  targetValue  Float?   // Target or benchmark value

  // Context and details
  category     String?  // Secondary categorization
  description  String?  // Detailed description
  factors      Json?    // Contributing factors
  insights     String?  // Key insights or observations

  // Comparative data
  previousValue Float?   // Previous period value
  changePercentage Float? // Percentage change
  trend        String?   // IMPROVING, DECLINING, STABLE, VOLATILE

  // Scoring and evaluation
  score        Float?    // Normalized score (0-100)
  grade        String?   // A, B, C, D, F
  rating       String?   // EXCELLENT, GOOD, AVERAGE, POOR, VERY_POOR

  // Time period
  periodStart  DateTime
  periodEnd    DateTime
  reportingDate DateTime @default(now())

  // Data source
  dataSource   String?   // MANUAL, AUTOMATIC, CALCULATED, SURVEY
  confidence   Float?    // Confidence level in data (0-1)

  // Recommendations
  recommendations Json?   // Improvement recommendations
  actionItems     Json?   // Suggested action items

  // Metadata
  tags         String?
  metadata     Json?

  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  creator User @relation("AnalyticsCreated", fields: [createdBy], references: [id])

  @@index([meetingId])
  @@index([metricType])
  @@index([metricName])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([createdBy])
  @@index([reportingDate])
  @@map("meeting_analytics")
}

// Meeting Conflict Detection Model
model MeetingConflict {
  id           String   @id @default(cuid())
  meetingId    String
  conflictType String   // PARTICIPANT_UNAVAILABLE, ROOM_UNAVAILABLE, EQUIPMENT_UNAVAILABLE, TIME_SLOT_CONFLICT

  // Conflict details
  conflictWith String?  // ID of conflicting entity (meeting, room, participant)
  description  String
  severity     String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL

  // Resolution
  resolution   String?  // RESCHEDULED, ROOM_CHANGED, EQUIPMENT_CHANGED, PARTICIPANT_REMOVED, IGNORED
  resolvedBy   String?
  resolvedAt   DateTime?
  resolutionNotes String?

  // Detection details
  detectedAt   DateTime @default(now())
  detectedBy   String?  // System or user who detected

  // Automatic resolution
  autoResolved Boolean  @default(false)
  autoResolution Json?  // Automatic resolution attempt

  // Impact assessment
  impactedParticipants Json?  // List of impacted participants
  impactAssessment   String?  // Impact on meeting objectives

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  meeting Meeting @relation("MeetingConflicts", fields: [meetingId], references: [id], onDelete: Cascade)
  resolver User? @relation("ConflictsResolved", fields: [resolvedBy], references: [id])
  detector User? @relation("ConflictsDetected", fields: [detectedBy], references: [id])

  @@index([meetingId])
  @@index([conflictType])
  @@index([severity])
  @@index([resolution])
  @@index([detectedAt])
  @@index([resolvedAt])
  @@map("meeting_conflicts")
}

// ========================================
// COMPREHENSIVE NOTIFICATION SYSTEM MODELS
// ========================================

// Enhanced Notification Model with comprehensive features
model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType // info, warning, error, success, task_assigned, deadline_reminder, status_update, system_announcement
  priority    String           @default("medium") // low, medium, high, urgent, critical

  // Read status and tracking
  isRead      Boolean          @default(false)
  readAt      DateTime?

  // Entity relationships
  entityType  String?          // case, meeting, document, user, department, workflow, etc.
  entityId    String?

  // Delivery configuration
  channels    Json?            // Delivery channels (in_app, email, sms, push, etc.)
  sendEmail   Boolean          @default(false)
  emailSent   Boolean          @default(false)
  sendSms     Boolean          @default(false)
  smsSent     Boolean          @default(false)
  sendPush    Boolean          @default(false)
  pushSent    Boolean          @default(false)

  // Scheduling and automation
  scheduledAt DateTime?
  expiresAt   DateTime?

  // Content and personalization
  metadata    Json?            // Additional notification data
  templateId  String?          // Template used for this notification
  variables   Json?            // Template variables and their values

  // User interactions
  clickedAt   DateTime?
  respondedAt DateTime?
  response    String?          // User's response to the notification

  // Batch operations
  batchId     String?          // For batch notification operations
  batchIndex  Int?             // Index within batch

  // Escalation and reminders
  reminderCount Int            @default(0)
  maxReminders   Int           @default(3)
  nextReminderAt DateTime?

  // System metadata
  correlationId String?        // For tracking related notifications
  source       String?         // Source system or module
  sourceId     String?         // ID in source system

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  template NotificationTemplate? @relation("TemplateNotifications", fields: [templateId], references: [id])

  history NotificationHistory[]
  deliveries NotificationDelivery[]

  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([isRead])
  @@index([createdAt])
  @@index([scheduledAt])
  @@index([expiresAt])
  @@index([entityType, entityId])
  @@index([batchId])
  @@index([correlationId])
  @@map("notifications")
}

// Notification Template Model
model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String   @default("GENERAL") // SYSTEM, CASE, MEETING, DOCUMENT, USER, DEADLINE, etc.
  type        NotificationType

  // Template content
  subject     String?  // For email notifications
  content     String   // Template content with placeholders
  htmlContent String?  // HTML version for emails

  // Template configuration
  variables   Json?    // Template variables definition
  placeholders Json?   // Available placeholders
  defaultChannels Json? // Default delivery channels

  // Template metadata
  version     Int      @default(1)
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)

  // Usage statistics
  usageCount  Int      @default(0)
  lastUsedAt  DateTime?

  // Approval workflow
  requiresApproval Boolean @default(false)
  approvedBy  String?
  approvedAt  DateTime?

  // Multi-language support
  language    String   @default("es")
  translations Json?   // Translations for different languages

  // Access control
  requiredRole String?  // Role required to use this template
  departmentId String?  // Department-specific template

  createdBy String
  creator  User @relation("TemplatesCreated", fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  notifications Notification[] @relation("TemplateNotifications")
  department Department? @relation("DepartmentNotificationTemplates", fields: [departmentId], references: [id])
  reminderConfigs ReminderConfig[] @relation("ReminderTemplates")

  @@index([category])
  @@index([type])
  @@index([isActive])
  @@index([isDefault])
  @@index([language])
  @@index([createdBy])
  @@index([departmentId])
  @@map("notification_templates")
}

// User Notification Preference Model
model UserNotificationPreference {
  id             String @id @default(cuid())
  userId         String @unique

  // Global preferences
  enableEmailNotifications   Boolean @default(true)
  enableSmsNotifications     Boolean @default(false)
  enablePushNotifications    Boolean @default(true)
  enableInAppNotifications   Boolean @default(true)

  // Quiet hours
  quietHoursEnabled          Boolean @default(false)
  quietHoursStart            String? // HH:MM format
  quietHoursEnd              String? // HH:MM format
  timezone                   String @default("America/Santo_Domingo")

  // Frequency controls
  dailyDigestEnabled         Boolean @default(false)
  weeklyDigestEnabled        Boolean @default(false)
  maxNotificationsPerHour    Int     @default(50)
  maxNotificationsPerDay     Int     @default(200)

  // Type-specific preferences
  typePreferences             Json?   // Preferences by notification type

  // Channel preferences by type
  channelPreferences         Json?   // Channel preferences by notification type

  // Department preferences
  departmentPreferences      Json?   // Preferences by department

  // Priority preferences
  priorityPreferences        Json?   // Preferences by priority level

  // Custom filters
  customFilters              Json?   // Custom notification filters
  blockedSenders             Json?   // Blocked senders
  allowedSenders             Json?   // Whitelisted senders

  // Mobile preferences
  mobileVibrationEnabled     Boolean @default(true)
  mobileSoundEnabled         Boolean @default(true)
  mobileBadgeEnabled         Boolean @default(true)

  // Email preferences
  emailFormatting            String  @default("both") // text, html, both
  emailSignatureEnabled      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

// Notification History Model (audit trail)
model NotificationHistory {
  id           String   @id @default(cuid())
  notificationId String

  // Event details
  eventType    String   // created, sent, delivered, read, clicked, failed, expired, etc.
  status       String?  // success, failed, pending, etc.

  // Event data
  eventData    Json?    // Event-specific data
  errorData    Json?    // Error information if applicable

  // Timing information
  eventAt      DateTime @default(now())
  duration     Int?     // Event duration in milliseconds

  // User and system information
  userId       String?  // User who triggered the event
  ipAddress    String?
  userAgent    String?
  source       String?  // Source system or component

  // Delivery information
  channel      String?  // Delivery channel (in_app, email, sms, push)
  provider     String?  // Service provider (ses, twilio, fcm, etc.)
  externalId   String?  // External tracking ID

  // Metadata
  metadata     Json?
  correlationId String?

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([eventType])
  @@index([eventAt])
  @@index([channel])
  @@index([status])
  @@index([correlationId])
  @@map("notification_histories")
}

// Notification Delivery Model (delivery tracking)
model NotificationDelivery {
  id             String   @id @default(cuid())
  notificationId String

  // Delivery configuration
  channel        String   // in_app, email, sms, push, webhook
  provider       String?  // Service provider

  // Recipient information
  recipient      String   // Email address, phone number, device token, etc.
  recipientType  String   // email, phone, device_token, webhook_url, etc.

  // Delivery status
  status         String   @default("pending") // pending, processing, sent, delivered, failed, expired, cancelled
  attempts       Int      @default(0)
  maxAttempts    Int      @default(3)

  // Timing information
  scheduledAt    DateTime?
  sentAt         DateTime?
  deliveredAt    DateTime?
  failedAt       DateTime?

  // Response information
  response       Json?    // Provider response
  error          Json?    // Error information
  messageId      String?  // Provider message ID

  // User interactions
  openedAt       DateTime?
  clickedAt      DateTime?
  respondedAt    DateTime?

  // Cost tracking
  cost           Float?   // Delivery cost
  currency       String   @default("USD")

  // Retry configuration
  retryAfter     DateTime?
  retryStrategy  String?  // exponential, linear, fixed

  // Metadata
  metadata       Json?
  correlationId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([channel])
  @@index([status])
  @@index([scheduledAt])
  @@index([sentAt])
  @@index([correlationId])
  @@map("notification_deliveries")
}

// Email Queue Model (for batch email processing)
model EmailQueue {
  id             String   @id @default(cuid())

  // Email details
  to             String   // Recipient email
  cc             String?  // CC recipients
  bcc            String?  // BCC recipients
  subject        String
  textContent    String?  // Plain text content
  htmlContent    String?  // HTML content

  // Sender information
  fromName       String?  // Sender display name
  fromEmail      String?  // Sender email (overrides default)
  replyTo        String?  // Reply-to address

  // Queue management
  status         String   @default("pending") // pending, processing, sent, failed, cancelled
  priority       String   @default("medium") // low, medium, high, urgent
  attempts       Int      @default(0)
  maxAttempts    Int      @default(3)

  // Timing
  scheduledAt    DateTime @default(now())
  sentAt         DateTime?
  failedAt       DateTime?

  // Provider configuration
  provider       String?  // SMTP service provider
  templateId     String?  // Template used

  // Tracking and analytics
  messageId      String?  // Provider message ID
  openedAt       DateTime?
  clickedAt      DateTime?
  bouncedAt      DateTime?
  bouncedReason  String?
  unsubscribedAt DateTime?

  // Error handling
  error          Json?    // Last error information
  retryAfter     DateTime?

  // Metadata
  metadata       Json?
  correlationId  String?
  batchId        String?  // For batch operations

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([priority])
  @@index([scheduledAt])
  @@index([sentAt])
  @@index([batchId])
  @@index([correlationId])
  @@map("email_queue")
}

// WebSocket Connection Model
model WebSocketConnection {
  id             String   @id @default(cuid())
  userId         String

  // Connection details
  socketId       String   @unique
  connectionId   String   @unique // Connection identifier
  serverId       String?  // Server instance ID

  // Session information
  ipAddress      String?
  userAgent      String?
  geolocation    Json?    // Geographic location

  // Connection status
  status         String   @default("active") // active, inactive, disconnected, error
  lastActivity   DateTime @default(now())
  connectedAt    DateTime @default(now())
  disconnectedAt DateTime?

  // Room subscriptions
  subscriptions  Json?    // Channels/rooms subscribed to
  userRooms      Json?    // User-specific rooms
  departmentRooms Json?   // Department-specific rooms

  // Performance metrics
  messagesSent   Int      @default(0)
  messagesReceived Int    @default(0)
  bytesTransferred BigInt  @default(0)

  // Connection quality
  latency        Int?     // Connection latency in ms
  quality        String?  // excellent, good, fair, poor

  // Security
  authToken      String?  // Authentication token
  sessionToken   String?  // Session token

  // Metadata
  metadata       Json?
  deviceInfo     Json?    // Device and browser information

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([socketId])
  @@index([connectionId])
  @@index([status])
  @@index([lastActivity])
  @@index([connectedAt])
  @@index([serverId])
  @@map("websocket_connections")
}

// Push Notification Subscription Model
model PushSubscription {
  id           String   @id @default(cuid())
  userId       String

  // Subscription details
  endpoint     String   // Push service endpoint
  p256dhKey    String   // P-256 ECDH public key
  authKey      String   // Authentication secret

  // Device information
  userAgent    String?
  deviceType   String?  // desktop, mobile, tablet
  platform     String?  // chrome, firefox, safari, edge

  // Application details
  appVersion   String?
  bundleId     String?

  // Subscription status
  isActive     Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?

  // Usage statistics
  notificationsSent Int @default(0)
  lastUsedAt    DateTime?

  // Security
  vapidKey     String?  // VAPID public key

  // Metadata
  metadata     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([endpoint])
  @@index([userId])
  @@index([isActive])
  @@index([deviceType])
  @@index([platform])
  @@map("push_subscriptions")
}

// Reminder Configuration Model
model ReminderConfig {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String   // deadline, follow_up, escalation, maintenance, daily_digest, weekly_summary
  schedule    String   // Cron expression or simple time expression

  // Activation control
  isActive    Boolean  @default(true)

  // Conditions for triggering reminders
  conditions  Json     // Entity type, filters, timing conditions

  // Template and content
  templateId  String?  // Template to use for notifications
  subject     String?  // Subject override
  message     String?  // Message override

  // Recipient configuration
  recipients  Json     // Who should receive the reminder

  // Delivery configuration
  channels    Json     // Delivery channels (email, push, in_app, etc.)
  priority    String   @default("medium")

  // Timing and frequency
  maxReminders Int     @default(3) // Maximum number of reminders
  reminderInterval Int  @default(24) // Hours between reminders

  // Metadata
  metadata    Json?    // Additional configuration data
  tags        String?  // Tags for categorization

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  template NotificationTemplate? @relation("ReminderTemplates", fields: [templateId], references: [id])
  jobs ReminderJob[]

  @@index([type])
  @@index([isActive])
  @@index([schedule])
  @@index([createdAt])
  @@map("reminder_configs")
}

// Reminder Job Model (individual reminder instances)
model ReminderJob {
  id          String   @id @default(cuid())
  configId    String

  // Scheduling
  scheduledAt DateTime
  executedAt  DateTime?

  // Status and result
  status      String   @default("pending") // pending, running, completed, failed, cancelled
  result      Json?    // Execution results
  error       String?  // Error message if failed

  // Entity context
  entityId    String?  // Entity this reminder is for
  entityType  String?  // Type of entity (case, task, meeting, etc.)

  // Retry configuration
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  nextRetryAt DateTime?

  // Metadata
  metadata    Json?
  correlationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  config ReminderConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId])
  @@index([status])
  @@index([scheduledAt])
  @@index([executedAt])
  @@index([entityType, entityId])
  @@index([correlationId])
  @@map("reminder_jobs")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ========================================
// DOCUMENT MANAGEMENT MODELS
// ========================================

// Document Version Model (enhanced version control)
model DocumentVersion {
  id          String   @id @default(cuid())
  documentId  String
  version     Int
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  fileHash    String?

  // Version metadata
  changeSummary String? // Summary of changes in this version
  isMajorVersion Boolean @default(false) // Major vs minor version
  isPublished    Boolean @default(false) // Published/active version
  isActive       Boolean @default(true) // Currently active version

  // Version control data
  diffData    Json?   // Difference data from previous version
  checksum    String? // File checksum for integrity
  compressedSize Int? // Size after compression

  // Creation metadata
  createdBy   String
  createdAt   DateTime @default(now())
  publishedAt DateTime?

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  creator  User    @relation("DocumentVersionCreator", fields: [createdBy], references: [id])

  // Version relationships
  previousVersionId String?
  previousVersion DocumentVersion? @relation("DocumentVersionHistory", fields: [previousVersionId], references: [id])
  nextVersions DocumentVersion[] @relation("DocumentVersionHistory")

  @@unique([documentId, version])
  @@index([documentId])
  @@index([version])
  @@index([isActive])
  @@index([isPublished])
  @@index([createdBy])
  @@index([createdAt])
  @@map("document_versions")
}

// Document Category Reference Model
model DocumentCategoryRef {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  category    DocumentCategory
  color       String?          // Hex color for UI
  icon        String?          // Icon identifier
  isActive    Boolean          @default(true)
  parentId    String?          // For hierarchical categories
  parent      DocumentCategoryRef? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    DocumentCategoryRef[] @relation("CategoryHierarchy")

  // Category configuration
  allowedTypes Json?           // Allowed document types for this category
  defaultSecurity DocumentSecurityLevel @default(INTERNAL)
  retentionPeriod Int?         // Default retention period in days
  autoArchiveRules Json?       // Automatic archiving rules

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documents Document[] @relation("CategoryDocuments")

  @@index([category])
  @@index([isActive])
  @@index([parentId])
  @@map("document_category_refs")
}

// Document Template Model
model DocumentTemplate {
  id          String       @id @default(cuid())
  name        String
  description String?
  templateType TemplateType
  category    DocumentCategory @default(ADMINISTRATIVE)

  // Template content
  content     String       // Template content with placeholders
  variables   Json?        // Template variables definition
  placeholders Json?       // Placeholders that can be filled
  layout      Json?        // Layout configuration

  // Template metadata
  version     Int          @default(1)
  isActive    Boolean      @default(true)
  isDefault   Boolean      @default(false)

  // Usage statistics
  usageCount  Int          @default(0)
  lastUsedAt  DateTime?

  // Template configuration
  securityLevel DocumentSecurityLevel @default(INTERNAL)
  allowedRoles Json?       // Roles that can use this template
  requiredFields Json?     // Required fields in this template

  // Approval workflow
  requiresApproval Boolean @default(false)
  approvedBy  String?
  approvedAt  DateTime?

  // Relations
  documents Document[] @relation("DocumentFromTemplate")
  versions DocumentTemplateVersion[]

  createdBy String
  creator  User @relation("TemplateCreator", fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([templateType])
  @@index([category])
  @@index([isActive])
  @@index([isDefault])
  @@index([createdBy])
  @@map("document_templates")
}

// Document Template Version Model
model DocumentTemplateVersion {
  id        String   @id @default(cuid())
  templateId String
  version   Int
  content   String
  changeLog String?

  createdBy String
  createdAt DateTime @default(now())

  // Relations
  template DocumentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  creator  User @relation(fields: [createdBy], references: [id])

  @@unique([templateId, version])
  @@index([templateId])
  @@index([version])
  @@map("document_template_versions")
}

// Document Permission Model
model DocumentPermission {
  id         String @id @default(cuid())
  documentId String
  userId     String? // Individual user permission
  roleId     String? // Role-based permission
  departmentId String? // Department-based permission

  // Permission details
  canView    Boolean @default(false)
  canEdit    Boolean @default(false)
  canDelete  Boolean @default(false)
  canDownload Boolean @default(false)
  canShare   Boolean @default(false)
  canSign    Boolean @default(false)
  canApprove Boolean @default(false)

  // Permission constraints
  expiresAt  DateTime?
  accessCount Int      @default(0)
  lastAccessed DateTime?

  // Permission metadata
  grantedBy  String?
  grantedAt  DateTime @default(now())
  reason     String?

  isActive   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user User? @relation("DocumentUserPermissions", fields: [userId], references: [id])
  role Role? @relation("DocumentRolePermissions", fields: [roleId], references: [id])
  department Department? @relation("DocumentDepartmentPermissions", fields: [departmentId], references: [id])

  @@unique([documentId, userId, roleId, departmentId])
  @@index([documentId])
  @@index([userId])
  @@index([roleId])
  @@index([departmentId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("document_permissions")
}

// Document History Model (audit trail)
model DocumentHistory {
  id          String           @id @default(cuid())
  documentId  String
  action      DocumentActionType

  // Change details
  field       String?          // Which field was changed
  previousValue String?        // Previous value (JSON)
  newValue    String?          // New value (JSON)
  changeReason String?         // Reason for the change

  // Action metadata
  description String?          // Detailed description of action
  metadata    Json?            // Additional action metadata

  // User and session information
  userId      String
  ipAddress   String?
  userAgent   String?
  sessionId   String?

  // File operation details
  fileSize    Int?             // File size if applicable
  fileName    String?          // File name if applicable
  filePath    String?          // File path if applicable

  createdAt DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user User @relation("DocumentHistoryUser", fields: [userId], references: [id])

  @@index([documentId])
  @@index([action])
  @@index([userId])
  @@index([createdAt])
  @@index([field])
  @@map("document_histories")
}

// Document Tag Model
model DocumentTag {
  id         String @id @default(cuid())
  documentId String
  tag        String
  color      String? // Hex color for UI
  isActive   Boolean @default(true)

  createdAt DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, tag])
  @@index([documentId])
  @@index([tag])
  @@index([isActive])
  @@map("document_tags")
}

// Document Action Model (user interactions)
model DocumentAction {
  id         String           @id @default(cuid())
  documentId String
  action     DocumentActionType

  // Action details
  metadata   Json?            // Action-specific metadata
  duration   Int?             // Action duration in milliseconds

  // User information
  userId     String
  ipAddress  String?
  userAgent  String?

  // Location information
  geolocation Json?           // GPS coordinates if available

  createdAt DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user User @relation("DocumentActionUser", fields: [userId], references: [id])

  @@index([documentId])
  @@index([action])
  @@index([userId])
  @@index([createdAt])
  @@map("document_actions")
}

// Document Sharing Model
model DocumentShare {
  id         String   @id @default(cuid())
  documentId String
  shareToken String   @unique

  // Share configuration
  shareType  String   // LINK, EMAIL, DIRECT
  permissions Json     // JSON array of permissions

  // Access control
  password   String?  // Optional password protection
  maxViews   Int?     // Maximum view count
  currentViews Int    @default(0)
  expiresAt  DateTime?

  // Share metadata
  sharedBy   String
  sharedWith String?  // Email or user ID if shared directly
  message    String?  // Personal message with share

  isActive   Boolean @default(true)
  createdAt DateTime @default(now())
  lastAccessed DateTime?

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sharer User @relation(fields: [sharedBy], references: [id])

  @@index([documentId])
  @@index([shareToken])
  @@index([sharedBy])
  @@index([expiresAt])
  @@index([isActive])
  @@map("document_shares")
}

// Document Workflow Model (approval workflows)
model DocumentWorkflow {
  id         String           @id @default(cuid())
  documentId String
  workflowType String         // APPROVAL, REVIEW, SIGNATURE

  // Workflow configuration
  title      String
  description String?
  steps      Json             // Workflow steps configuration
  currentStep Int            @default(0)

  // Workflow status
  status     String           @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  initiatedBy String
  initiatedAt DateTime @default(now())
  completedAt DateTime?
  completedBy String?

  // Workflow data
  formData   Json?            // Form data collected during workflow
  decisions  Json?            // Workflow decisions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  initiator User @relation("DocumentWorkflowInitiator", fields: [initiatedBy], references: [id])
  completer User? @relation("DocumentWorkflowCompleter", fields: [completedBy], references: [id])

  stepsAssignments DocumentWorkflowStep[]

  @@index([documentId])
  @@index([workflowType])
  @@index([status])
  @@index([initiatedBy])
  @@index([createdAt])
  @@map("document_workflows")
}

// Document Workflow Step Model
model DocumentWorkflowStep {
  id         String   @id @default(cuid())
  workflowId String
  stepOrder  Int
  stepType   String   // APPROVAL, REVIEW, SIGNATURE, NOTIFICATION

  // Step configuration
  title      String
  description String?
  assignees  Json     // Array of user/role IDs

  // Step status
  status     String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, SKIPPED
  assignedTo String?  // Currently assigned user
  assignedAt DateTime?

  // Step completion
  completedBy String?
  completedAt DateTime?
  decision   String?  // APPROVED, REJECTED, SIGNED
  comments   String?
  attachments Json?   // Array of attachment paths

  // Time tracking
  dueDate    DateTime?
  completedIn Int?     // Time to complete in minutes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workflow DocumentWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, stepOrder])
  @@index([workflowId])
  @@index([stepOrder])
  @@index([status])
  @@index([assignedTo])
  @@index([dueDate])
  @@map("document_workflow_steps")
}

// Document Comment Model
model DocumentComment {
  id         String   @id @default(cuid())
  documentId String
  content    String

  // Comment threading
  parentId   String?
  parent     DocumentComment? @relation("CommentThread", fields: [parentId], references: [id])
  replies    DocumentComment[] @relation("CommentThread")

  // Comment metadata
  isEdited   Boolean  @default(false)
  editedAt   DateTime?
  isResolved Boolean  @default(false)
  resolvedBy String?
  resolvedAt DateTime?

  // Comment location (for specific document sections)
  page       Int?
  position   Json?    // X,Y coordinates or text range

  createdBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  author User @relation("DocumentCommentAuthor", fields: [createdBy], references: [id])
  resolver User? @relation("DocumentCommentResolver", fields: [resolvedBy], references: [id])

  @@index([documentId])
  @@index([parentId])
  @@index([createdBy])
  @@index([isResolved])
  @@index([createdAt])
  @@map("document_comments")
}

model SystemConfig {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  type        String  @default("string") // string, number, boolean, json
  category    String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// Department-Stage Assignment Model
model DepartmentStageAssignment {
  id           String     @id @default(cuid())
  departmentId String
  stage        CaseStage
  isActive     Boolean    @default(true)
  assignedAt   DateTime   @default(now())
  assignedBy   String?

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([departmentId, stage])
  @@index([departmentId])
  @@index([stage])
  @@map("department_stage_assignments")
}

// Department Permission Model
model DepartmentPermission {
  id           String       @id @default(cuid())
  departmentId String
  permissionId String
  isGranted    Boolean      @default(true)
  assignedAt   DateTime     @default(now())
  assignedBy   String?
  expiresAt    DateTime?

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([departmentId, permissionId])
  @@index([departmentId])
  @@index([permissionId])
  @@map("department_permissions")
}

// Department Transfer Model (for user transfers between departments)
model DepartmentTransfer {
  id                String   @id @default(cuid())
  userId            String
  sourceDepartmentId String
  destinationDepartmentId String
  transferType      String   // PROMOTION, DEMOTION, LATERAL, TEMPORARY
  reason            String?
  effectiveDate     DateTime @default(now())
  scheduledFor      DateTime?
  completedAt       DateTime?
  status            String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  approvedBy        String?
  approvedAt        DateTime?
  notes             String?
  metadata          Json?    // Additional transfer information

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceDepartment Department @relation("SourceDepartment", fields: [sourceDepartmentId], references: [id])
  destinationDepartment Department @relation("DestinationDepartment", fields: [destinationDepartmentId], references: [id])

  @@index([userId])
  @@index([sourceDepartmentId])
  @@index([destinationDepartmentId])
  @@index([status])
  @@index([effectiveDate])
  @@map("department_transfers")
}

// Enhanced Workflow Models for 17-Stage System

// Stage Configuration Model
model Stage {
  id                String    @id @default(cuid())
  stage             CaseStage @unique
  name              String
  description       String
  sequenceOrder     Int       // Sequential order (1-17)
  responsibleDepartment String  // Department code responsible for this stage
  estimatedDuration Int?      // Estimated duration in days
  isActive          Boolean   @default(true)

  // Stage configuration
  requiredDocuments   Json?    // Array of required document types
  validationRules     Json?    // Validation rules for this stage
  autoAssignmentRules Json?    // Rules for automatic assignment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stageChecklists     StageChecklist[]
  caseStageAssignments CaseStageAssignment[]
  fromProgressions    StageProgression[] @relation("StageFrom")
  toProgressions      StageProgression[] @relation("StageTo")

  @@index([sequenceOrder])
  @@index([responsibleDepartment])
  @@index([isActive])
  @@map("stages")
}

// Case Stage Assignment Model (tracks current stage for each case)
model CaseStageAssignment {
  id         String   @id @default(cuid())
  caseId     String
  stage      CaseStage
  assignedAt DateTime @default(now())
  assignedBy String?  // User who assigned this stage
  dueDate    DateTime? // Estimated completion date
  isActive   Boolean  @default(true)
  notes      String?

  // Relations
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  stageConfig Stage @relation(fields: [stage], references: [stage])

  // Checklist completions for this stage assignment
  checklistCompletions ChecklistItemCompletion[] @relation("ChecklistCompletions")
  stageChecklistCompletions ChecklistCompletion[] @relation("StageChecklistCompletions")

  @@unique([caseId, stage])
  @@index([caseId])
  @@index([stage])
  @@index([assignedBy])
  @@index([dueDate])
  @@index([isActive])
  @@map("case_stage_assignments")
}

// Stage Progression History Model
model StageProgression {
  id             String   @id @default(cuid())
  caseId         String
  fromStage      CaseStage?
  toStage        CaseStage
  progressionType String   // FORWARD, BACKWARD, JUMP
  reason         String?  // Reason for progression or return
  observations   String?  // Detailed observations for returns
  approvedBy     String?  // User who approved the progression
  approvedAt     DateTime?
  duration       Int?     // Duration in days at previous stage
  ipAddress      String?
  userAgent      String?

  createdAt DateTime @default(now())

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  fromStageConfig Stage? @relation("StageFrom", fields: [fromStage], references: [stage])
  toStageConfig   Stage   @relation("StageTo", fields: [toStage], references: [stage])

  @@index([caseId])
  @@index([fromStage])
  @@index([toStage])
  @@index([progressionType])
  @@index([approvedBy])
  @@index([createdAt])
  @@map("stage_progressions")
}

// Stage Checklist Model
model StageChecklist {
  id          String @id @default(cuid())
  stage       CaseStage
  title       String
  description String?
  isRequired  Boolean @default(true)
  itemType    String  // DOCUMENT, ACTION, VERIFICATION, APPROVAL
  sequence    Int?    // Order within stage
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stageConfig Stage @relation(fields: [stage], references: [stage])
  completions ChecklistCompletion[]

  @@unique([stage, sequence])
  @@index([stage])
  @@index([isRequired])
  @@index([isActive])
  @@map("stage_checklists")
}

// Checklist Completion Model
model ChecklistCompletion {
  id             String   @id @default(cuid())
  caseStageId    String   // Links to CaseStageAssignment
  checklistId    String
  isCompleted    Boolean  @default(false)
  completedAt    DateTime?
  completedBy    String?  // User who completed the item
  notes          String?  // Notes about completion
  attachmentPath String?  // Path to attached document if applicable

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  caseStageAssignment CaseStageAssignment @relation("StageChecklistCompletions", fields: [caseStageId], references: [id], onDelete: Cascade)
  checklist StageChecklist @relation(fields: [checklistId], references: [id])

  @@unique([caseStageId, checklistId])
  @@index([caseStageId])
  @@index([checklistId])
  @@index([isCompleted])
  @@index([completedBy])
  @@map("checklist_completions")
}

// Stage Notification Model
model StageNotification {
  id          String          @id @default(cuid())
  caseId      String
  stage       CaseStage
  type        NotificationType
  title       String
  message     String
  recipientId String          // User ID of recipient
  isRead      Boolean         @default(false)
  readAt      DateTime?

  // Notification configuration
  sendEmail   Boolean @default(false)
  emailSent   Boolean @default(false)
  priority    String  @default("medium") // low, medium, high, urgent

  // Metadata
  metadata    Json?   // Additional notification data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  recipient User? @relation(fields: [recipientId], references: [id])

  @@index([caseId])
  @@index([stage])
  @@index([recipientId])
  @@index([type])
  @@index([isRead])
  @@index([priority])
  @@index([createdAt])
  @@map("stage_notifications")
}

// ========================================
// VALIDATION AND CONTROL SYSTEM MODELS
// ========================================

// Dynamic Checklist Template Model
model ChecklistTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  stage       CaseStage
  isActive    Boolean  @default(true)
  version     Int      @default(1)

  // Template configuration
  defaultItems Json?    // Default checklist items
  autoGenerate Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  checklistItems ChecklistItem[]

  @@unique([name, version])
  @@index([stage])
  @@index([isActive])
  @@map("checklist_templates")
}

// Checklist Item Model
model ChecklistItem {
  id            String           @id @default(cuid())
  templateId    String
  title         String
  description   String?
  type          ChecklistItemType
  isRequired    Boolean          @default(true)
  sequence      Int
  estimatedTime Int?             // Estimated completion time in minutes

  // Item configuration
  validationRule String?         // Validation rule or expression
  attachmentRequired Boolean     @default(false)
  attachmentTypes Json?          // Allowed attachment types
  dependencies    Json?          // Dependencies on other items
  autoValidate    Boolean        @default(false)

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  template ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  completions ChecklistItemCompletion[]

  @@unique([templateId, sequence])
  @@index([templateId])
  @@index([type])
  @@index([isRequired])
  @@index([isActive])
  @@map("checklist_items")
}

// Checklist Item Completion Model
model ChecklistItemCompletion {
  id             String   @id @default(cuid())
  caseStageId    String   // Links to CaseStageAssignment
  itemId         String
  isCompleted    Boolean  @default(false)
  completedAt    DateTime?
  completedBy    String?  // User who completed the item
  notes          String?  // Notes about completion
  attachmentPath String?  // Path to attached document if applicable

  // Validation data
  validationResult Json?   // Result of validation checks
  validationErrors Json?   // List of validation errors

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  caseStageAssignment CaseStageAssignment @relation("ChecklistCompletions", fields: [caseStageId], references: [id], onDelete: Cascade)
  item ChecklistItem @relation(fields: [itemId], references: [id])

  @@unique([caseStageId, itemId])
  @@index([caseStageId])
  @@index([itemId])
  @@index([isCompleted])
  @@index([completedBy])
  @@map("checklist_item_completions")
}

// Digital Signature Model
model DigitalSignature {
  id           String       @id @default(cuid())
  userId       String
  signatureType SignatureType
  entityType   String       // case, document, approval, etc.
  entityId     String
  signatureData Json        // Encrypted signature data

  // Signature metadata
  ipAddress    String?
  userAgent    String?
  deviceInfo   Json?        // Device and browser information
  geolocation  Json?        // GPS coordinates if available
  biometricData Json?       // Biometric verification data if used

  // Delegation information
  delegatedBy   String?     // User who delegated this signature
  delegationReason String?  // Reason for delegation

  isActive Boolean @default(true)
  revokedAt DateTime?
  revokedBy String?
  revokedReason String?

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  document Document? @relation("DocumentSignatures", fields: [entityId], references: [id])

  @@index([userId])
  @@index([signatureType])
  @@index([entityType, entityId])
  @@index([isActive])
  @@index([createdAt])
  @@map("digital_signatures")
}

// Approval Workflow Model
model ApprovalWorkflow {
  id            String        @id @default(cuid())
  caseId        String
  stage         CaseStage
  workflowType  String        // Type of approval workflow
  title         String
  description   String?

  // Workflow configuration
  requiredApprovals Int       @default(1)
  approvalMatrix     Json?    // Approval rules and hierarchy
  autoApproveRules   Json?    // Rules for automatic approval

  // Workflow status
  status        ApprovalStatus @default(PENDING)
  initiatedBy   String
  initiatedAt   DateTime       @default(now())
  completedAt   DateTime?
  completedBy   String?

  // Time tracking
  dueDate       DateTime?
  escalatedAt   DateTime?
  escalatedTo   String?        // Escalated to user/role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  initiator User @relation("ApprovalInitiator", fields: [initiatedBy], references: [id])
  completer User? @relation("ApprovalCompleter", fields: [completedBy], references: [id])

  approvals Approval[]

  @@index([caseId])
  @@index([stage])
  @@index([status])
  @@index([initiatedBy])
  @@index([dueDate])
  @@map("approval_workflows")
}

// Approval Model
model Approval {
  id            String        @id @default(cuid())
  workflowId    String
  userId        String
  approvalLevel Int           // Level in approval hierarchy
  decision      ApprovalStatus @default(PENDING)

  // Approval details
  comments      String?
  conditions    Json?         // Conditions or requirements
  delegationTo  String?       // Delegated to another user

  // Time tracking
  reviewedAt    DateTime?
  responseTime  Int?          // Response time in hours

  // Metadata
  ipAddress     String?
  userAgent     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workflow ApprovalWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([workflowId, userId])
  @@index([workflowId])
  @@index([userId])
  @@index([decision])
  @@index([reviewedAt])
  @@map("approvals")
}

// Time Tracking Model
model TimeTracking {
  id            String   @id @default(cuid())
  caseId        String
  stage         CaseStage
  action        String   // START, PAUSE, RESUME, COMPLETE, EXTEND

  // Time data
  startTime     DateTime @default(now())
  endTime       DateTime?
  duration      Int?     // Duration in minutes
  pausedDuration Int?    // Total paused time in minutes

  // Reason and justification
  reason        String?  // Reason for action
  justification String?  // Justification for extensions or pauses

  // User attribution
  userId        String   // User who performed the action

  // Alert configuration
  alertThreshold Int?    // Alert threshold in hours
  alertSent      Boolean @default(false)

  createdAt DateTime @default(now())

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([caseId])
  @@index([stage])
  @@index([action])
  @@index([userId])
  @@index([startTime])
  @@map("time_tracking")
}

// Parallel Review Assignment Model
model ReviewAssignment {
  id            String    @id @default(cuid())
  caseId        String
  reviewType    ReviewType
  assignedTo    String    // User ID
  assignedBy    String    // User who made the assignment

  // Assignment details
  priority      String    @default("medium")
  instructions  String?
  dueDate       DateTime?
  estimatedTime Int?      // Estimated time in hours

  // Review status
  status        String    @default("ASSIGNED") // ASSIGNED, IN_PROGRESS, COMPLETED, REJECTED
  startedAt     DateTime?
  completedAt   DateTime?

  // Review configuration
  parallelWith  Json?     // IDs of parallel reviews
  dependsOn     Json?     // Dependencies on other reviews

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assignee User @relation("ReviewAssignee", fields: [assignedTo], references: [id])
  assigner User @relation("ReviewAssigner", fields: [assignedBy], references: [id])

  reviews Review[]

  @@index([caseId])
  @@index([reviewType])
  @@index([assignedTo])
  @@index([status])
  @@index([dueDate])
  @@map("review_assignments")
}

// Review Model
model Review {
  id             String   @id @default(cuid())
  assignmentId   String
  reviewerId     String

  // Review content
  findings       String
  recommendations String?
  conclusion     String
  rating         Int?     // Review rating (1-5)

  // Review decision
  decision       String   // APPROVED, REJECTED, CONDITIONAL, NEEDS_REVISION

  // Supporting evidence
  evidence       Json?    // Supporting documents and evidence
  attachments    Json?    // List of attachment paths

  // Time tracking
  reviewTime     Int?     // Time spent in minutes

  // Metadata
  ipAddress      String?
  userAgent      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignment ReviewAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  reviewer User @relation("ReviewReviewer", fields: [reviewerId], references: [id])

  @@index([assignmentId])
  @@index([reviewerId])
  @@index([decision])
  @@index([createdAt])
  @@map("reviews")
}

// Observation Model
model Observation {
  id           String             @id @default(cuid())
  caseId       String
  stage        CaseStage?
  title        String
  description  String

  // Categorization
  category     String
  subcategory  String?
  priority     ObservationPriority @default(MEDIUM)
  status       ObservationStatus   @default(OPEN)

  // Attribution
  observedBy   String   // User who created the observation
  assignedTo   String?  // User assigned to respond

  // Time tracking
  deadline     DateTime?
  resolvedAt   DateTime?

  // Observation thread
  parentObservationId String? // For threaded conversations
  responseTo          String? // ID of observation being responded to

  // Metadata
  tags         String?  // Comma-separated tags
  attachments  Json?    // List of attachment paths

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  observer User @relation("ObservationObserver", fields: [observedBy], references: [id])
  assignee User? @relation("ObservationAssignee", fields: [assignedTo], references: [id])

  parentObservation Observation? @relation("ObservationThread", fields: [parentObservationId], references: [id])
  childObservations Observation[] @relation("ObservationThread")

  responses ObservationResponse[]

  @@index([caseId])
  @@index([stage])
  @@index([priority])
  @@index([status])
  @@index([observedBy])
  @@index([assignedTo])
  @@index([deadline])
  @@map("observations")
}

// Observation Response Model
model ObservationResponse {
  id            String   @id @default(cuid())
  observationId String
  userId        String
  response      String

  // Response metadata
  responseType  String   // ACKNOWLEDGMENT, CLARIFICATION, ACTION, RESOLUTION
  attachments   Json?    // List of attachment paths

  // Time tracking
  responseTime  Int?     // Time to respond in hours

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  observation Observation @relation(fields: [observationId], references: [id], onDelete: Cascade)
  user User @relation("ObservationResponder", fields: [userId], references: [id])

  @@index([observationId])
  @@index([userId])
  @@index([responseType])
  @@index([createdAt])
  @@map("observation_responses")
}

// Validation Rule Model
model ValidationRule {
  id            String             @id @default(cuid())
  name          String
  description   String?
  type          ValidationRuleType
  stage         CaseStage?

  // Rule configuration
  expression    String             // Validation expression or rule
  errorMessage  String             // Error message to display
  severity      String             @default("ERROR") // ERROR, WARNING, INFO

  // Rule metadata
  isActive      Boolean            @default(true)
  version       Int                @default(1)

  // Dependencies
  dependsOn     Json?              // Dependencies on other rules

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  executions ValidationExecution[]

  @@unique([name, version])
  @@index([type])
  @@index([stage])
  @@index([isActive])
  @@map("validation_rules")
}

// Validation Execution Model
model ValidationExecution {
  id          String   @id @default(cuid())
  ruleId      String
  caseId      String
  stage       CaseStage?

  // Execution details
  entityType  String   // case, document, checklist_item, etc.
  entityId    String
  context     Json?    // Context data for validation

  // Results
  passed      Boolean  @default(false)
  errors      Json?    // Validation errors
  warnings    Json?    // Validation warnings

  // Metadata
  executedBy  String?  // User who triggered validation
  executedAt  DateTime @default(now())

  // Relations
  rule ValidationRule @relation(fields: [ruleId], references: [id])
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([caseId])
  @@index([stage])
  @@index([entityType, entityId])
  @@index([passed])
  @@index([executedAt])
  @@map("validation_executions")
}

// Risk Assessment Model
model RiskAssessment {
  id            String    @id @default(cuid())
  caseId        String
  stage         CaseStage?

  // Risk identification
  riskFactors   Json      // Identified risk factors
  riskLevel     RiskLevel
  riskScore     Float     // Calculated risk score (0-100)

  // Impact assessment
  likelihood    Int       // 1-5 scale
  impact        Int       // 1-5 scale
  urgency       Int       // 1-5 scale

  // Risk details
  description   String
  mitigation    String?   // Mitigation strategies
  contingency   String?   // Contingency plans

  // Assessment metadata
  assessedBy    String    // User who performed assessment
  assessmentDate DateTime @default(now())
  validUntil    DateTime? // When assessment expires

  // Recommendations
  recommendations Json?    // Recommended actions

  // Status tracking
  status        String    @default("ACTIVE") // ACTIVE, MITIGATED, ACCEPTED, CLOSED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assessor User @relation(fields: [assessedBy], references: [id])

  alerts RiskAlert[]

  @@index([caseId])
  @@index([stage])
  @@index([riskLevel])
  @@index([riskScore])
  @@index([assessedBy])
  @@index([status])
  @@map("risk_assessments")
}

// Risk Alert Model
model RiskAlert {
  id              String   @id @default(cuid())
  riskAssessmentId String
  alertType       AlertType

  // Alert details
  title           String
  message         String
  severity        String   // LOW, MEDIUM, HIGH, CRITICAL

  // Alert status
  isActive        Boolean  @default(true)
  acknowledgedAt  DateTime?
  acknowledgedBy  String?
  resolvedAt      DateTime?
  resolvedBy      String?

  // Notification settings
  sendEmail       Boolean  @default(true)
  sendSMS         Boolean  @default(false)
  recipients      Json?    // List of recipient user IDs

  // Alert configuration
  triggerConditions Json?   // Conditions that triggered this alert
  escalationRules    Json?   // Escalation rules

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  riskAssessment RiskAssessment @relation(fields: [riskAssessmentId], references: [id], onDelete: Cascade)

  acknowledger User? @relation("RiskAlertAcknowledger", fields: [acknowledgedBy], references: [id])
  resolver User? @relation("RiskAlertResolver", fields: [resolvedBy], references: [id])

  @@index([riskAssessmentId])
  @@index([alertType])
  @@index([severity])
  @@index([isActive])
  @@index([createdAt])
  @@map("risk_alerts")
}
