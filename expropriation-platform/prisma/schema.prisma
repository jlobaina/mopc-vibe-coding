// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums for type safety and consistency
enum UserRole {
  SUPER_ADMIN
  DEPARTMENT_ADMIN
  ANALYST
  SUPERVISOR
  OBSERVER
  TECHNICAL_MEETING_COORDINATOR
}

enum CaseStatus {
  PENDIENTE
  EN_PROGRESO
  COMPLETADO
  ARCHIVED
  SUSPENDED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CaseStage {
  RECEPCION_SOLICITUD
  VERIFICACION_REQUISITOS
  CARGA_DOCUMENTOS
  ASIGNACION_ANALISTA
  ANALISIS_PRELIMINAR
  NOTIFICACION_PROPIETARIO
  PERITAJE_TECNICO
  DETERMINACION_VALOR
  OFERTA_COMPRA
  NEGOCIACION
  APROBACION_ACUERDO
  ELABORACION_ESCRITURA
  FIRMA_DOCUMENTOS
  REGISTRO_PROPIEDAD
  DESEMBOLSO_PAGO
  ENTREGA_INMUEBLE
  CIERRE_ARCHIVO
  SUSPENDED
  CANCELLED
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  ASSIGNED
  REASSIGNED
  APPROVED
  REJECTED
  COMMENTED
  UPLOADED
  DOWNLOADED
  VIEWED
  ARCHIVED
  RESTORED
  EXPORTED
  IMPORTED
  LOGIN
  LOGOUT
  // Case specific activities
  STATUS_CHANGED
  STAGE_CHANGED
  PROPERTY_UPDATED
  OWNER_UPDATED
  FINANCIAL_UPDATED
  LEGAL_UPDATED
  NOTE_ADDED
  DOCUMENT_ADDED
  ASSIGNMENT_CHANGED
  PRIORITY_CHANGED
}

enum MeetingType {
  SITE_VISIT
  COORDINATION
  DECISION
  PUBLIC_CONSULTATION
  TECHNICAL_REVIEW
  LEGAL_REVIEW
  NEGOTIATION
  STATUS_UPDATE
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  TASK_ASSIGNED
  DEADLINE_REMINDER
  STATUS_UPDATE
  SYSTEM_ANNOUNCEMENT
}

enum PermissionType {
  READ
  WRITE
  DELETE
  ASSIGN
  SUPERVISE
  EXPORT
  IMPORT
  MANAGE_USERS
  MANAGE_DEPARTMENTS
  SYSTEM_CONFIG
  VIEW_REPORTS
  APPROVE_DECISIONS
  COORDINATE_MEETINGS
}

model Department {
  id        String       @id @default(cuid())
  name      String
  code      String       @unique
  parentId  String?
  parent    Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentHierarchy")

  // Department details
  description String?
  headUserId  String?    // Department head/manager
  contactInfo Json?      // Contact information (email, phone, address)
  location    Json?      // Physical location details
  type        String?    // Department type/classification

  // Status management
  isActive      Boolean @default(true)
  isSuspended   Boolean @default(false)
  suspensionReason String?
  suspendedAt   DateTime?
  suspendedBy   String?

  // Statistics and metadata
  userCapacity  Int?     // Maximum user capacity
  budget        Float?   // Department budget
  operatingHours Json?   // Operating hours/schedule

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users                   User[]
  cases                   Case[]
  userDepartmentAssignments UserDepartmentAssignment[]
  headUser                User?    @relation("DepartmentHead", fields: [headUserId], references: [id])
  departmentStageAssignments DepartmentStageAssignment[]
  departmentPermissions DepartmentPermission[]
  departmentTransfers    DepartmentTransfer[] @relation("SourceDepartment")
  destinationTransfers   DepartmentTransfer[] @relation("DestinationDepartment")

  @@index([parentId])
  @@index([isActive])
  @@index([isSuspended])
  @@index([headUserId])
  @@index([code])
  @@map("departments")
}

model Permission {
  id          String         @id @default(cuid())
  name        String         @unique
  type        PermissionType
  description String?
  resource    String? // e.g., "cases", "users", "departments", "reports"
  action      String? // e.g., "create", "read", "update", "delete"
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  rolePermissions RolePermission[]
  departmentPermissions DepartmentPermission[]

  @@map("permissions")
}

model RolePermission {
  id        String   @id @default(cuid())
  isGranted Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json // Store permissions as JSON for flexibility
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users           User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  username             String    @unique
  passwordHash         String
  firstName            String
  lastName             String
  phone                String?
  avatar               String?
  isActive             Boolean   @default(true)

  // Status and suspension
  isSuspended          Boolean   @default(false)
  suspensionReason     String?
  suspendedAt          DateTime?
  suspendedBy          String?

  // Login tracking
  lastLoginAt          DateTime?
  lastLoginIp          String?
  lastLoginUserAgent   String?
  loginCount           Int       @default(0)
  failedLoginAttempts  Int       @default(0)
  lockedUntil          DateTime?

  // Password management
  passwordResetToken   String?
  passwordResetExpires DateTime?
  passwordChangedAt    DateTime  @default(now())
  mustChangePassword   Boolean   @default(false)

  // Profile information
  jobTitle             String?
  bio                  String?
  officeLocation       String?
  workingHours         String?   // JSON with schedule
  preferredLanguage    String    @default("es")
  timezone             String    @default("America/Santo_Domingo")

  // Security settings
  twoFactorEnabled     Boolean   @default(false)
  twoFactorSecret      String?
  backupCodes          String?   // JSON array of backup codes

  // Email preferences
  emailNotifications   Boolean   @default(true)
  emailMarketing       Boolean   @default(false)
  emailDigest          Boolean   @default(true)

  // System settings
  theme                String    @default("light")
  dateRange            String?   // JSON with preferences
  dashboardConfig      String?   // JSON with dashboard layout

  // Soft delete
  deletedAt            DateTime?
  deletedBy            String?

  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict)

  // Case relationships
  createdCases    Case[] @relation("CaseCreator")
  assignedCases   Case[] @relation("CaseAssignee")
  supervisedCases Case[] @relation("CaseSupervisor")

  // Activity tracking
  activities    Activity[]
  caseHistories CaseHistory[]
  documents     Document[]
  notifications Notification[]
  assignments   CaseAssignment[]
  sessions      UserSession[]
  passwordHistories PasswordHistory[]
  departmentAssignments UserDepartmentAssignment[]
  headOfDepartments Department[] @relation("DepartmentHead")
  departmentTransfers DepartmentTransfer[]
  receivedStageNotifications StageNotification[]

  // NextAuth.js relations
  accounts      Account[]
  sessions_auth Session[]

  @@index([email])
  @@index([username])
  @@index([departmentId])
  @@index([roleId])
  @@index([isActive])
  @@index([isSuspended])
  @@index([lastLoginAt])
  @@index([deletedAt])
  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  ipAddress    String?
  userAgent    String?
  deviceInfo   String?  // JSON with device details
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastAccessAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

model PasswordHistory {
  id             String   @id @default(cuid())
  passwordHash   String
  changedAt      DateTime @default(now())
  changedBy      String?  // ID of user who changed the password
  changeReason   String?  // admin_reset, user_change, expired, etc.
  ipAddress      String?
  userAgent      String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([changedAt])
  @@map("password_histories")
}

model UserDepartmentAssignment {
  id           String   @id @default(cuid())
  userId       String
  departmentId String
  isPrimary    Boolean  @default(false)
  assignedAt   DateTime @default(now())
  assignedBy   String?  // ID of user who made the assignment
  isActive     Boolean  @default(true)
  permissions  String?  // JSON with specific permissions for this department

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@index([userId])
  @@index([departmentId])
  @@map("user_department_assignments")
}

model Case {
  id           String     @id @default(cuid())
  fileNumber   String     @unique // Enhanced from caseNumber to fileNumber
  title        String
  description  String?
  currentStage CaseStage  @default(RECEPCION_SOLICITUD)
  priority     Priority   @default(MEDIUM)
  status       CaseStatus @default(PENDIENTE)

  // Dates
  startDate       DateTime  @default(now())
  expectedEndDate DateTime?
  actualEndDate   DateTime?

  // Property Information
  propertyAddress    String
  propertyCity       String
  propertyProvince   String
  propertyDescription String?
  propertyCoordinates String? // GPS coordinates
  propertyArea       Float?   // Area in square meters
  propertyType       String?  // Type of property (residential, commercial, etc.)

  // Owner Information
  ownerName          String
  ownerIdentification String? // ID number or tax ID
  ownerContact       String?  // Phone number
  ownerEmail         String?
  ownerAddress       String?
  ownerType          String?  // Individual, company, government, etc.

  // Financial Information
  estimatedValue     Float?
  actualValue        Float?
  appraisalValue     Float?
  compensationAmount Float?
  currency           String   @default("DOP") // Dominican Peso

  // Legal Information
  expropriationDecree String? // Legal decree number
  judicialCaseNumber  String? // Court case number if applicable
  legalStatus         String? // Current legal status

  // Progress tracking
  progressPercentage Float @default(0)

  // Soft delete
  deletedAt DateTime?
  deletedBy String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)

  createdById String
  createdBy   User   @relation("CaseCreator", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("CaseAssignee", fields: [assignedToId], references: [id])

  supervisedById String?
  supervisedBy   User?   @relation("CaseSupervisor", fields: [supervisedById], references: [id])

  // Related data
  documents   Document[]
  histories   CaseHistory[]
  activities  Activity[]
  meetings    TechnicalMeeting[]
  assignments CaseAssignment[]

  // Workflow relations
  stageAssignments CaseStageAssignment[]
  stageProgressions StageProgression[]
  stageNotifications StageNotification[]

  @@index([fileNumber])
  @@index([currentStage])
  @@index([priority])
  @@index([status])
  @@index([departmentId])
  @@index([createdById])
  @@index([assignedToId])
  @@index([supervisedById])
  @@index([createdAt])
  @@index([startDate])
  @@index([expectedEndDate])
  @@index([deletedAt])
  @@index([ownerName])
  @@index([propertyAddress])
  @@map("cases")
}

model Document {
  id          String  @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  version     Int     @default(1)
  isPublic    Boolean @default(false)
  tags        String? // Comma-separated tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  // Version history
  parentId String?
  parent   Document?  @relation("DocumentVersion", fields: [parentId], references: [id])
  children Document[] @relation("DocumentVersion")

  @@map("documents")
}

model CaseHistory {
  id            String     @id @default(cuid())
  action        String     // Type of change: status_change, stage_change, assignment_change, field_update, etc.
  field         String?    // Which field was changed
  previousValue String?    // JSON string with previous value
  newValue      String?    // JSON string with new value
  reason        String?    // Reason for the change
  notes         String?    // Additional notes
  duration      Int?       // Duration in days at previous stage (for stage changes)
  ipAddress     String?    // IP address of the user making the change
  userAgent     String?    // User agent of the browser

  createdAt DateTime @default(now())

  // Relations
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  changedById String
  changedBy   User   @relation(fields: [changedById], references: [id])

  @@index([caseId])
  @@index([changedById])
  @@index([action])
  @@index([createdAt])
  @@map("case_histories")
}

model Activity {
  id          String       @id @default(cuid())
  action      ActivityType // created, updated, deleted, assigned, etc.
  entityType  String // case, document, user, etc.
  entityId    String
  description String?
  metadata    Json? // Additional data about the activity

  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  caseId String?
  case   Case?   @relation(fields: [caseId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@index([caseId])
  @@map("activities")
}

model CaseAssignment {
  id         String   @id @default(cuid())
  type       String // analyst, reviewer, approver, etc.
  isActive   Boolean  @default(true)
  assignedAt DateTime @default(now())

  // Relations
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([caseId, userId, type])
  @@map("case_assignments")
}

model TechnicalMeeting {
  id          String      @id @default(cuid())
  title       String
  description String?
  meetingType MeetingType // site_visit, coordination, decision, etc.
  location    String?
  virtual     Boolean     @default(false)
  meetingUrl  String?

  // Dates and times
  scheduledFor DateTime
  duration     Int // Duration in minutes

  // Status
  status String @default("scheduled") // scheduled, in_progress, completed, cancelled

  // Participants
  requiredParticipants Int @default(0)
  actualParticipants   Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  // Meeting data (stored as JSON for flexibility)
  agenda    Json?
  minutes   Json?
  decisions Json?

  @@map("technical_meetings")
}

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType // info, warning, error, success
  isRead  Boolean          @default(false)

  // Entity reference
  entityType String? // case, meeting, document, etc.
  entityId   String?

  createdAt DateTime  @default(now())
  readAt    DateTime?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model SystemConfig {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  type        String  @default("string") // string, number, boolean, json
  category    String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// Department-Stage Assignment Model
model DepartmentStageAssignment {
  id           String     @id @default(cuid())
  departmentId String
  stage        CaseStage
  isActive     Boolean    @default(true)
  assignedAt   DateTime   @default(now())
  assignedBy   String?

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([departmentId, stage])
  @@index([departmentId])
  @@index([stage])
  @@map("department_stage_assignments")
}

// Department Permission Model
model DepartmentPermission {
  id           String       @id @default(cuid())
  departmentId String
  permissionId String
  isGranted    Boolean      @default(true)
  assignedAt   DateTime     @default(now())
  assignedBy   String?
  expiresAt    DateTime?

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([departmentId, permissionId])
  @@index([departmentId])
  @@index([permissionId])
  @@map("department_permissions")
}

// Department Transfer Model (for user transfers between departments)
model DepartmentTransfer {
  id                String   @id @default(cuid())
  userId            String
  sourceDepartmentId String
  destinationDepartmentId String
  transferType      String   // PROMOTION, DEMOTION, LATERAL, TEMPORARY
  reason            String?
  effectiveDate     DateTime @default(now())
  scheduledFor      DateTime?
  completedAt       DateTime?
  status            String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  approvedBy        String?
  approvedAt        DateTime?
  notes             String?
  metadata          Json?    // Additional transfer information

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceDepartment Department @relation("SourceDepartment", fields: [sourceDepartmentId], references: [id])
  destinationDepartment Department @relation("DestinationDepartment", fields: [destinationDepartmentId], references: [id])

  @@index([userId])
  @@index([sourceDepartmentId])
  @@index([destinationDepartmentId])
  @@index([status])
  @@index([effectiveDate])
  @@map("department_transfers")
}

// Enhanced Workflow Models for 17-Stage System

// Stage Configuration Model
model Stage {
  id                String    @id @default(cuid())
  stage             CaseStage @unique
  name              String
  description       String
  sequenceOrder     Int       // Sequential order (1-17)
  responsibleDepartment String  // Department code responsible for this stage
  estimatedDuration Int?      // Estimated duration in days
  isActive          Boolean   @default(true)

  // Stage configuration
  requiredDocuments   Json?    // Array of required document types
  validationRules     Json?    // Validation rules for this stage
  autoAssignmentRules Json?    // Rules for automatic assignment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stageChecklists     StageChecklist[]
  caseStageAssignments CaseStageAssignment[]
  fromProgressions    StageProgression[] @relation("StageFrom")
  toProgressions      StageProgression[] @relation("StageTo")

  @@index([sequenceOrder])
  @@index([responsibleDepartment])
  @@index([isActive])
  @@map("stages")
}

// Case Stage Assignment Model (tracks current stage for each case)
model CaseStageAssignment {
  id         String   @id @default(cuid())
  caseId     String
  stage      CaseStage
  assignedAt DateTime @default(now())
  assignedBy String?  // User who assigned this stage
  dueDate    DateTime? // Estimated completion date
  isActive   Boolean  @default(true)
  notes      String?

  // Relations
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  stageConfig Stage @relation(fields: [stage], references: [stage])

  // Checklist completions for this stage assignment
  checklistCompletions ChecklistCompletion[]

  @@unique([caseId, stage])
  @@index([caseId])
  @@index([stage])
  @@index([assignedBy])
  @@index([dueDate])
  @@index([isActive])
  @@map("case_stage_assignments")
}

// Stage Progression History Model
model StageProgression {
  id             String   @id @default(cuid())
  caseId         String
  fromStage      CaseStage?
  toStage        CaseStage
  progressionType String   // FORWARD, BACKWARD, JUMP
  reason         String?  // Reason for progression or return
  observations   String?  // Detailed observations for returns
  approvedBy     String?  // User who approved the progression
  approvedAt     DateTime?
  duration       Int?     // Duration in days at previous stage
  ipAddress      String?
  userAgent      String?

  createdAt DateTime @default(now())

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  fromStageConfig Stage? @relation("StageFrom", fields: [fromStage], references: [stage])
  toStageConfig   Stage   @relation("StageTo", fields: [toStage], references: [stage])

  @@index([caseId])
  @@index([fromStage])
  @@index([toStage])
  @@index([progressionType])
  @@index([approvedBy])
  @@index([createdAt])
  @@map("stage_progressions")
}

// Stage Checklist Model
model StageChecklist {
  id          String @id @default(cuid())
  stage       CaseStage
  title       String
  description String?
  isRequired  Boolean @default(true)
  itemType    String  // DOCUMENT, ACTION, VERIFICATION, APPROVAL
  sequence    Int?    // Order within stage
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stageConfig Stage @relation(fields: [stage], references: [stage])
  completions ChecklistCompletion[]

  @@unique([stage, sequence])
  @@index([stage])
  @@index([isRequired])
  @@index([isActive])
  @@map("stage_checklists")
}

// Checklist Completion Model
model ChecklistCompletion {
  id             String   @id @default(cuid())
  caseStageId    String   // Links to CaseStageAssignment
  checklistId    String
  isCompleted    Boolean  @default(false)
  completedAt    DateTime?
  completedBy    String?  // User who completed the item
  notes          String?  // Notes about completion
  attachmentPath String?  // Path to attached document if applicable

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  caseStageAssignment CaseStageAssignment @relation(fields: [caseStageId], references: [id], onDelete: Cascade)
  checklist StageChecklist @relation(fields: [checklistId], references: [id])

  @@unique([caseStageId, checklistId])
  @@index([caseStageId])
  @@index([checklistId])
  @@index([isCompleted])
  @@index([completedBy])
  @@map("checklist_completions")
}

// Stage Notification Model
model StageNotification {
  id          String          @id @default(cuid())
  caseId      String
  stage       CaseStage
  type        NotificationType
  title       String
  message     String
  recipientId String          // User ID of recipient
  isRead      Boolean         @default(false)
  readAt      DateTime?

  // Notification configuration
  sendEmail   Boolean @default(false)
  emailSent   Boolean @default(false)
  priority    String  @default("medium") // low, medium, high, urgent

  // Metadata
  metadata    Json?   // Additional notification data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  recipient User? @relation(fields: [recipientId], references: [id])

  @@index([caseId])
  @@index([stage])
  @@index([recipientId])
  @@index([type])
  @@index([isRead])
  @@index([priority])
  @@index([createdAt])
  @@map("stage_notifications")
}
