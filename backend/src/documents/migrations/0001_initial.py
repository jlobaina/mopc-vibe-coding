# Generated by Django 4.2.7 on 2024-01-01 00:00

import uuid
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('workflow', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=100, verbose_name='Document Type Name')),
                ('code', models.CharField(max_length=20, unique=True, verbose_name='Document Type Code')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_required', models.BooleanField(default=False, help_text='Whether this document type is mandatory', verbose_name='Is Required')),
                ('allowed_formats', models.CharField(blank=True, help_text='Comma-separated list of allowed file formats (e.g., PDF,DOC,JPG)', max_length=100, verbose_name='Allowed Formats')),
                ('max_size_mb', models.PositiveIntegerField(blank=True, help_text='Maximum file size in megabytes', null=True, verbose_name='Max Size (MB)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('department', models.ForeignKey(blank=True, help_text='Department that requires this document type', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.department', verbose_name='Department')),
            ],
            options={
                'verbose_name': 'Document Type',
                'verbose_name_plural': 'Document Types',
                'db_table': 'tipos_documento',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=255, verbose_name='Template Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('template_file', models.FileField(upload_to='templates/', verbose_name='Template File')),
                ('variables', models.JSONField(blank=True, default=dict, help_text='Variables that can be replaced in the template', verbose_name='Template Variables')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.department', verbose_name='Department')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='documents.documenttype', verbose_name='Document Type')),
            ],
            options={
                'verbose_name': 'Document Template',
                'verbose_name_plural': 'Document Templates',
                'db_table': 'document_templates',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('original_name', models.CharField(max_length=255, verbose_name='Original Name')),
                ('file_name', models.CharField(max_length=255, verbose_name='Stored File Name')),
                ('file_path', models.CharField(max_length=500, verbose_name='File Path')),
                ('file_size', models.PositiveIntegerField(verbose_name='File Size (bytes)')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME Type')),
                ('hash_sha256', models.CharField(help_text='SHA256 hash for file integrity verification', max_length=64, verbose_name='SHA256 Hash')),
                ('version', models.PositiveIntegerField(default=1, verbose_name='Version')),
                ('expiration_date', models.DateTimeField(blank=True, help_text='Date when document expires (if applicable)', null=True, verbose_name='Expiration Date')),
                ('status', models.CharField(choices=[('activo', 'Activo'), ('reemplazado', 'Reemplazado'), ('eliminado', 'Eliminado'), ('en_revision', 'En Revisi√≥n'), ('aprobado', 'Aprobado'), ('rechazado', 'Rechazado')], default='activo', max_length=20, verbose_name='Status')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='documents.documenttype', verbose_name='Document Type')),
                ('expediente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documentos', to='workflow.expediente', verbose_name='Expediente')),
                ('parent_document', models.ForeignKey(blank=True, help_text='Previous version of this document', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='documents.document', verbose_name='Parent Document')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'db_table': 'documentos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('result', models.CharField(choices=[('aprobado', 'Aprobado'), ('rechazado', 'Rechazado'), ('requiere_cambios', 'Requiere Cambios'), ('pendiente', 'Pendiente')], default='pendiente', max_length=20, verbose_name='Review Result')),
                ('comments', models.TextField(blank=True, help_text='Review comments and feedback', verbose_name='Comments')),
                ('review_date', models.DateTimeField(auto_now_add=True, verbose_name='Review Date')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisiones', to='documents.document', verbose_name='Document')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Reviewer')),
            ],
            options={
                'verbose_name': 'Document Review',
                'verbose_name_plural': 'Document Reviews',
                'db_table': 'revisiones_documento',
                'ordering': ['-review_date'],
            },
        ),
        migrations.CreateModel(
            name='DocumentAccessLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('access_type', models.CharField(choices=[('view', 'View'), ('download', 'Download'), ('edit', 'Edit'), ('delete', 'Delete'), ('share', 'Share')], max_length=20, verbose_name='Access Type')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='documents.document', verbose_name='Document')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Document Access Log',
                'verbose_name_plural': 'Document Access Logs',
                'db_table': 'document_access_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AlterIndexTogether(
            name='document',
            index_together={('expediente',), ('document_type',), ('status',), ('hash_sha256',), ('uploaded_by',)},
        ),
        migrations.AlterIndexTogether(
            name='documentreview',
            index_together={('document',), ('reviewer',), ('result',)},
        ),
        migrations.AlterIndexTogether(
            name='documentaccesslog',
            index_together={('document',), ('user',), ('access_type',), ('created_at',)},
        ),
    ]