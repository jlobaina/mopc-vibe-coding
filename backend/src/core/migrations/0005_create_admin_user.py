# Generated by Django 4.2.7 on 2024-01-01 00:00

import django.db.migrations.operations.special
from django.conf import settings
from django.db import migrations

def create_admin_user(apps, schema_editor):
    """Create a sample admin user with all permissions."""
    User = apps.get_model('core', 'User')
    Permission = apps.get_model('core', 'Permission')
    UserPermission = apps.get_model('core', 'UserPermission')
    Department = apps.get_model('core', 'Department')

    # Get admin department (TI Department for system admin)
    admin_dept = Department.objects.filter(code='DTI').first()
    if not admin_dept:
        # Fallback to first department if TI doesn't exist
        admin_dept = Department.objects.first()

    # Create admin user
    admin_user = User.objects.create_user(
        username='admin',
        email='admin@mopc.gov.do',
        password='admin123',
        first_name='Administrador',
        last_name='del Sistema',
        cedula='00000000000',
        role='Administrador del Sistema',
        department=admin_dept,
        is_staff=True,
        is_superuser=True,
        is_active=True,
    )

    # Assign all permissions to admin user
    all_permissions = Permission.objects.all()
    for permission in all_permissions:
        UserPermission.objects.create(
            user=admin_user,
            permission=permission
        )

    # Create additional sample users for different departments
    sample_users = [
        {
            'username': 'juridico_user',
            'email': 'juridico@mopc.gov.do',
            'password': 'user123',
            'first_name': 'Juan',
            'last_name': 'Pérez',
            'cedula': '00123456789',
            'role': 'Abogado',
            'department_code': 'DJ',
            'is_staff': True,
        },
        {
            'username': 'tecnico_user',
            'email': 'tecnico@mopc.gov.do',
            'password': 'user123',
            'first_name': 'María',
            'last_name': 'González',
            'cedula': '00234567890',
            'role': 'Ingeniero',
            'department_code': 'DT',
            'is_staff': True,
        },
        {
            'username': 'valuos_user',
            'email': 'valuos@mopc.gov.do',
            'password': 'user123',
            'first_name': 'Carlos',
            'last_name': 'Rodríguez',
            'cedula': '00345678901',
            'role': 'Perito Valuador',
            'department_code': 'DA',
            'is_staff': True,
        },
        {
            'username': 'finanzas_user',
            'email': 'finanzas@mopc.gov.do',
            'password': 'user123',
            'first_name': 'Ana',
            'last_name': 'Martínez',
            'cedula': '00456789012',
            'role': 'Analista Financiero',
            'department_code': 'DF',
            'is_staff': True,
        },
        {
            'username': 'solicitudes_user',
            'email': 'solicitudes@mopc.gov.do',
            'password': 'user123',
            'first_name': 'Luis',
            'last_name': 'Sánchez',
            'cedula': '00567890123',
            'role': 'Recepcionista',
            'department_code': 'DS',
            'is_staff': True,
        },
    ]

    for user_data in sample_users:
        # Get department for user
        dept = Department.objects.filter(code=user_data['department_code']).first()

        # Remove department_code from user_data as it's not a field in User model
        department_code = user_data.pop('department_code')

        if dept:
            user_data['department'] = dept

        # Create user
        user = User.objects.create_user(**user_data)

        # Assign basic permissions based on role
        basic_permissions = [
            'ver expedientes',
            'ver documentos',
            'ver tareas',
            'ver notificaciones',
            'actualizar tareas',
            'completar tareas',
        ]

        if user_data['role'] in ['Abogado', 'Ingeniero', 'Perito Valuador', 'Analista Financiero']:
            basic_permissions.extend([
                'actualizar expedientes',
                'crear documentos',
                'actualizar documentos',
                'aprobar documentos',
            ])

        # Get permission objects and assign
        for perm_name in basic_permissions:
            try:
                permission = Permission.objects.filter(name__icontains=perm_name).first()
                if permission:
                    UserPermission.objects.create(
                        user=user,
                        permission=permission
                    )
            except Exception:
                continue

def reverse_admin_user(apps, schema_editor):
    """Reverse the creation of admin and sample users."""
    User = apps.get_model('core', 'User')
    UserPermission = apps.get_model('core', 'UserPermission')

    # Delete all user permissions
    UserPermission.objects.all().delete()

    # Delete sample users
    usernames_to_delete = [
        'admin',
        'juridico_user',
        'tecnico_user',
        'valuos_user',
        'finanzas_user',
        'solicitudes_user',
    ]

    User.objects.filter(username__in=usernames_to_delete).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_create_workflow_states'),
    ]

    operations = [
        migrations.RunPython(create_admin_user, reverse_admin_user),
    ]