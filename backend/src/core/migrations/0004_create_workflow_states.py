# Generated by Django 4.2.7 on 2024-01-01 00:00

from django.db import migrations

def create_workflow_states(apps, schema_editor):
    """Create default workflow states for the expropriation process."""
    WorkflowState = apps.get_model('core', 'WorkflowState')

    states = [
        {
            'name': 'Iniciado',
            'description': 'El expediente ha sido iniciado y está en revisión inicial',
            'is_final': False,
            'color': '#3B82F6',  # Blue
            'order': 1,
        },
        {
            'name': 'En Revisión Legal',
            'description': 'El expediente está siendo revisado por el departamento jurídico',
            'is_final': False,
            'color': '#F59E0B',  # Amber
            'order': 2,
        },
        {
            'name': 'En Evaluación Técnica',
            'description': 'El expediente está en evaluación técnica y de avalúos',
            'is_final': False,
            'color': '#8B5CF6',  # Purple
            'order': 3,
        },
        {
            'name': 'En Análisis Ambiental',
            'description': 'El expediente está en evaluación de impacto ambiental',
            'is_final': False,
            'color': '#10B981',  # Green
            'order': 4,
        },
        {
            'name': 'En Análisis Financiero',
            'description': 'El expediente está en evaluación financiera y presupuestaria',
            'is_final': False,
            'color': '#EF4444',  # Red
            'order': 5,
        },
        {
            'name': 'En Notificación Pública',
            'description': 'El expediente está en período de notificación pública',
            'is_final': False,
            'color': '#F97316',  # Orange
            'order': 6,
        },
        {
            'name': 'En Negociación',
            'description': 'El expediente está en proceso de negociación con propietarios',
            'is_final': False,
            'color': '#EC4899',  # Pink
            'order': 7,
        },
        {
            'name': 'Pendiente de Aprobación',
            'description': 'El expediente está pendiente de aprobación final',
            'is_final': False,
            'color': '#14B8A6',  # Teal
            'order': 8,
        },
        {
            'name': 'Aprobado',
            'description': 'El expediente ha sido aprobado y listo para ejecución',
            'is_final': False,
            'color': '#22C55E',  # Green
            'order': 9,
        },
        {
            'name': 'En Ejecución',
            'description': 'El expediente está en fase de ejecución de pagos y transferencias',
            'is_final': False,
            'color': '#0EA5E9',  # Sky
            'order': 10,
        },
        {
            'name': 'Completado',
            'description': 'El expediente ha sido completado exitosamente',
            'is_final': True,
            'color': '#16A34A',  # Green
            'order': 11,
        },
        {
            'name': 'Rechazado',
            'description': 'El expediente ha sido rechazado',
            'is_final': True,
            'color': '#DC2626',  # Red
            'order': 12,
        },
        {
            'name': 'En Apelación',
            'description': 'El expediente está en proceso de apelación',
            'is_final': False,
            'color': '#7C3AED',  # Violet
            'order': 13,
        },
        {
            'name': 'Suspendido',
            'description': 'El expediente está temporalmente suspendido',
            'is_final': False,
            'color': '#6B7280',  # Gray
            'order': 14,
        },
        {
            'name': 'Cancelado',
            'description': 'El expediente ha sido cancelado',
            'is_final': True,
            'color': '#991B1B',  # Dark Red
            'order': 15,
        },
    ]

    for state_data in states:
        WorkflowState.objects.create(**state_data)

def reverse_workflow_states(apps, schema_editor):
    """Reverse the creation of workflow states."""
    WorkflowState = apps.get_model('core', 'WorkflowState')
    WorkflowState.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_create_default_permissions'),
    ]

    operations = [
        migrations.RunPython(create_workflow_states, reverse_workflow_states),
    ]